#!/bin/tcsh -f

######
# For easier comparison with gcm_setup:
# :20,$s/GEOSCTM_IM/AGCM_IM/g
# :20,$s/GEOSCTM_JM/AGCM_JM/g
# :20,$s/GEOSCTM_LM/AGCM_LM/g
# :20,$s/CTMSETUP/GCMSETUP/g
# :20,$s/ctm_setup/gcm_setup/g
# to reverse:
# :20,$s/AGCM_IM/GEOSCTM_IM/g
# :20,$s/AGCM_JM/GEOSCTM_JM/g
# :20,$s/AGCM_LM/GEOSCTM_LM/g
# :20,$s/GCMSETUP/CTMSETUP/g
# :20,$s/gcm_setup/ctm_setup/g
######

#######################################################################
#                            Define Colors
#         Note:  For No Colors, set C1 and C2 to NONE 
#######################################################################

set BLACK   = `tput setaf 0`
set RED     = `tput setaf 1`
set GREEN   = `tput setaf 2`
set YELLOW  = `tput setaf 3`
set BLUE    = `tput setaf 4`
set MAGENTA = `tput setaf 5`
set CYAN    = `tput setaf 6`
set WHITE   = `tput setaf 7`
set RESET   = `tput sgr0`
set BOLD    = `tput bold`
set COLORS  = `echo $BLACK $RED $GREEN $YELLOW $BLUE $MAGENTA $CYAN $WHITE $RESET`

if( -e $HOME/.CTMSETUP ) then
     set CTMSETUPinfo = `cat $HOME/.CTMSETUP`
     set C1 = $CTMSETUPinfo[1]
     set C2 = $CTMSETUPinfo[2]
else
     set C1 = $RED
     set C2 = $BLUE
endif
     set CN = $RESET

#######################################################################
#                     Build Directory Locations
#######################################################################

# Set Current Working Path to ctm_setup
# -------------------------------------
setenv ARCH `uname -s`
if ($ARCH == Darwin) then
   set FINDPATH = realpath
else
   set FINDPATH = 'readlink -f'
endif
set CTMSETUP = `$FINDPATH $0`
set BINDIR   = `dirname $CTMSETUP`
set GEOSDEF  = `dirname $BINDIR`
set ETCDIR   = ${GEOSDEF}/etc

# Test if GEOSgcm.x is here which means you are in install directory
if (! -x GEOSctm.x) then
   echo "You are trying to run $0 in the Applications/GEOSgcm_App directory"
   echo "This is no longer supported. Please run from the bin/ directory"
   echo "in your installation"
   exit 1
endif

#######################################################################
#                   Test for Command Line Flags
#######################################################################

# Set default behavior of switches
set NOCVS = TRUE
set GPU   = FALSE

while ( $#argv > 0 )
   set arg = $argv[1]
   shift argv
   switch ( $arg )
      # Set our colors
      case -[Cc]:
      case --[Cc][Oo][Ll][Oo][Rr]:
         goto SETCOLOR

      # Run the gpu code
      case -[Gg]:
      case --[Gg][Pp][Uu]:

         # If we get here, the environment is (probably) right for GPUs
         set GPU = TRUE
         breaksw

      # Do not archive the source
      case --nocvs:
         set NOCVS = TRUE
         breaksw

      # Here any string not above will trigger USAGE
      case -[Hh]:
      case --[Hh][Ee][Ll][Pp]:
      default:
         goto USAGE
   endsw
end

#######################################################################
#           CVS: Use CVS functionality only at NCCS or NAS
#######################################################################

setenv NODE `uname -n`
setenv SITE `awk '{print $2}' $ETCDIR/SITE.rc`

if ( $SITE != 'NCCS' && $SITE != 'NAS' ) then
   set NOCVS = TRUE
endif

#######################################################################
#           CVS: Test for Environment Variable
#######################################################################

if ( $?ESMA_NOCVS ) then
   set NOCVS = TRUE
endif

#######################################################################
#           CVS: Test if we are on a compute node
#######################################################################

if ( $NOCVS != "TRUE" ) then

if ( $SITE == 'NCCS' ) then
   if ( ($NODE =~ borg*) || ($NODE =~ warp*) ) then
      goto ONCOMPUTE
   endif
   
else if ( $SITE == 'NAS' ) then
   if ( ($NODE =~ r[0-9]*i[0-9]*n[0-9]*) || ($NODE =~ maia*) ) then
      goto ONCOMPUTE
   endif
endif

endif

#######################################################################
#                 Test for Compiler and MPI Setup
#######################################################################

setenv BASEDIR `awk '{print $2}' $ETCDIR/BASEDIR.rc`

if ( `echo $BASEDIR | grep -i ifort` != '') then
   set COMPILER = ifort
else if ( `echo $BASEDIR | grep -i pgfortran` != '') then
   set COMPILER = pgfortran
else
   # Assume default is ifort in case of older baselibs
   set COMPILER = ifort 
endif

     if ( `echo $BASEDIR | grep -i mvapich2` != '') then
   set MPI = mvapich2
else if ( `echo $BASEDIR | grep -i openmpi`  != '') then
   set MPI = openmpi
else if ( `echo $BASEDIR | grep -i impi`     != '') then
   set MPI = intelmpi
else if ( `echo $BASEDIR | grep -i intelmpi` != '') then
   set MPI = intelmpi
else if ( `echo $BASEDIR | grep -i mpt`      != '') then
   set MPI = mpt
else
   # Assume default is Intel MPI in case of older baselibs
   set MPI = intelmpi 
endif

#######################################################################
#                   Set up RUN_CMD for MPI Stack
#######################################################################

if ( $MPI == mvapich2 ) then
   if ( $SITE == 'NAS') then
      setenv RUN_CMD 'mpirun_rsh -export -hostfile $PBS_NODEFILE -np ' # mpi run for MVAPICH2
   else if ($SITE == 'NCCS') then
      setenv RUN_CMD 'srun --mpi=pmi2 -n '   # mpi run for MVAPICH2
   endif
else if ( $MPI == openmpi ) then
   setenv RUN_CMD 'mpirun -map-by core -bind-to core -np ' # mpi run for OpenMPI 
else if ( $MPI == intelmpi ) then
   setenv RUN_CMD 'mpirun -np '              # mpi run for Intel MPI
else if ( $MPI == mpt ) then
   setenv RUN_CMD 'mpiexec_mpt -np '         # mpi run for MPT
endif

#######################################################################
#               Enter Experiment Specific Run Parameters
#######################################################################

echo
echo "Enter the ${C1}Experiment ID${CN}:"
set EXPID = $<

DESC:
echo "Enter a 1-line ${C1}Experiment Description${CN}:"
set EXPTMP =  `echo $<`
if( $#EXPTMP == 0 ) goto DESC
set EXPDSC =  $EXPTMP[1]
foreach WORD ($EXPTMP)
if( $WORD !=  $EXPDSC ) set EXPDSC = `echo ${EXPDSC}_${WORD}`
end

CTMTAG:
set CTMTAG = `cat ${ETCDIR}/.GEOSCTM_VERSION`
#echo "${C1}CVS BASE Source Tag${CN} used for Experiment: ${C2}${CTMTAG}${CN}"

#######################################################################
#            Test to see if you want to CLONE old experiment
#######################################################################

# Check for CLONE
# ---------------
ASKCLONE:
echo "Do you wish to ${C1}CLONE${CN} an old experiment? (Default: ${C2}NO${CN} or ${C2}FALSE${CN})"
set   KLONE  = $<
if( .$KLONE == . ) then
   set   KLONE  = FALSE
else
   set   KLONE  = `echo   $KLONE | tr "[:lower:]" "[:upper:]"`
   if(  $KLONE == "Y"     | \
        $KLONE == "YES"   | \
        $KLONE == "T"     | \
        $KLONE == "TRUE"  ) set KLONE = TRUE
   if(  $KLONE == "N"     | \
        $KLONE == "NO"    | \
        $KLONE == "F"     | \
        $KLONE == "FALSE" ) set KLONE = FALSE

   if( $KLONE != "TRUE" & $KLONE != "FALSE" ) then
      echo
      echo "${C1}CLONE${CN} must be set equal to ${C2}TRUE${CN} or ${C2}FALSE${CN}!"
      goto ASKCLONE
   else if ( $KLONE == "TRUE" ) then
      goto DOCLONE
   endif
endif

#######################################################################
#          Continue to enter in experiment parameters 
#######################################################################

HRCODE:
echo "Enter the ${C1}Atmospheric Horizontal Resolution${CN} code:"
echo "-----------------------------------------------------------"
echo "            Cubed-Sphere                   "
echo "-----------------------------------------------------------"
echo "          ${C2}c48   --   2  deg ${CN}"
echo "          ${C2}c90   --   1  deg ${CN}"
echo "          ${C2}c180  -- 1/2  deg (${C1}56-km${C2}) ${CN}"
echo "          ${C2}c360  -- 1/4  deg (${C1}28-km${C2}) ${CN} "
echo "          ${C2}c720  -- 1/8  deg (${C1}14-km${C2}) ${CN}"
echo "          ${C2}c1440 -- 1/16 deg (${C1} 7-km${C2}) ${CN}"
echo " "
set HRCODE = `echo $<`
set HRCODE = `echo $HRCODE | tr "[:upper:]" "[:lower:]"`

if( $HRCODE != 'c24'   & \
    $HRCODE != 'c48'   & \
    $HRCODE != 'c90'   & \
    $HRCODE != 'c180'  & \
    $HRCODE != 'c360'  & \
    $HRCODE != 'c720'  & \
    $HRCODE != 'c1440' ) goto HRCODE

if( $HRCODE == 'c24'   | \
    $HRCODE == 'c48'   | \
    $HRCODE == 'c90'   | \
    $HRCODE == 'c180'  | \
    $HRCODE == 'c360'  | \
    $HRCODE == 'c720'  | \
    $HRCODE == 'c1440' ) then
     set Resolution = $HRCODE
endif

if( $#Resolution == 2 ) then
   set GEOSCTM_IM = $Resolution[1]
   set GEOSCTM_JM = $Resolution[2]
   set CUBED   = FALSE
   set DYCORE  = FV
else
   set CUBED   = TRUE
   set DYCORE  = FV3
   if (`echo $Resolution[1] | cut -b1` == "c" ) then
        set  GEOSCTM_IM = $Resolution[1]
   else
        set  GEOSCTM_IM = "c$Resolution[1]"
   endif
endif


echo "Enter the Atmospheric Model ${C1}Vertical Resolution${CN}: ${C2}LM${CN} (Default: 72)"
set   GEOSCTM_LM = $<
if( .$GEOSCTM_LM == . ) then
  set GEOSCTM_LM = 72
endif


set BCSTAG   = Icarus_Reynolds

# Set DEFAULT SHMEM Parameter
# ---------------------------
     set USE_SHMEM = 0

# Set IAU-Forcing and Bias Correction OFF
# ---------------------------------------
     set FORCEDAS = "#"
     set FORCEGCM = "#"

# Set Default Convert Parameters
# ------------------------------
     set CNV_NX = 2
     set CNV_NY = 24     # Best set to number of cores per node

# Set Default Readers and Writers
# -------------------------------
     set NUM_READERS = 1
     set NUM_WRITERS = 1

# Default Run Parameters
# ----------------------
if( $GEOSCTM_IM ==  "c12" ) then
     set       DT = 900
     set SOLAR_DT = 3600
     set IRRAD_DT = 3600
     set OCEAN_DT = $IRRAD_DT
     set  CHEM_DT = $DT
     set GEOSCTM_IM  = 12
     set GEOSCTM_JM  = `expr $GEOSCTM_IM \* 6`
     set       NX = 2
     set       NY = `expr $NX \* 6`
     set   HYDROSTATIC = TRUE
     set HIST_IM  = `expr $GEOSCTM_IM \* 4`
     set HIST_JM  = `expr $GEOSCTM_IM \* 2 + 1`
     set GRID_FILE = "Gnomonic_c${GEOSCTM_IM}.dat"
     set JOB_SGMT = 00000015
     set NUM_SGMT = 20
     set ATMOStag = CF0012x6C
     set POST_NDS = 4
     set   CNV_NX = 1
     set   CNV_NY = 6
endif
if( $GEOSCTM_IM ==  "c24" ) then
     set       DT = 900
     set SOLAR_DT = 3600
     set IRRAD_DT = 3600
     set OCEAN_DT = $IRRAD_DT
     set  CHEM_DT = $DT
     set GEOSCTM_IM  = 24
     set GEOSCTM_JM  = `expr $GEOSCTM_IM \* 6`
     set       NX = 4
     set       NY = `expr $NX \* 6`
     set   HYDROSTATIC = TRUE
     set HIST_IM  = `expr $GEOSCTM_IM \* 4`
     set HIST_JM  = `expr $GEOSCTM_IM \* 2 + 1`
     set GRID_FILE = "Gnomonic_c${GEOSCTM_IM}.dat"
     set JOB_SGMT = 00000015
     set NUM_SGMT = 20
     set ATMOStag = CF0024x6C
     set POST_NDS = 4
     set   CNV_NX = 1
     set   CNV_NY = 6
endif
if( $GEOSCTM_IM ==  "c48" ) then
     set       DT = 450
     set SOLAR_DT = 3600
     set IRRAD_DT = 3600
     set OCEAN_DT = $IRRAD_DT
     set  CHEM_DT = $DT
     set GEOSCTM_IM  = 48
     set GEOSCTM_JM  = `expr $GEOSCTM_IM \* 6`
     set       NX = 4
     set       NY = `expr $NX \* 6`
     set   HYDROSTATIC = TRUE
     set HIST_IM  = 180
     set HIST_JM  =  91
     set GRID_FILE = "Gnomonic_c${GEOSCTM_IM}.dat"
     set JOB_SGMT = 00000015
     set NUM_SGMT = 20
     set ATMOStag = CF0048x6C
     set POST_NDS = 4
endif
if( $GEOSCTM_IM ==  "c90" ) then
     set       DT = 450
     set SOLAR_DT = 3600
     set IRRAD_DT = 3600
     set OCEAN_DT = $IRRAD_DT
     set  CHEM_DT = $DT
     set GEOSCTM_IM  = 90
     set GEOSCTM_JM  = `expr $GEOSCTM_IM \* 6`
     set       NX = 4
     set       NY = `expr $NX \* 6`
     set HYDROSTATIC = TRUE
     set HIST_IM  = `expr $GEOSCTM_IM \* 4`
     set HIST_JM  = `expr $GEOSCTM_IM \* 2 + 1`
     set GRID_FILE = "Gnomonic_c${GEOSCTM_IM}.dat"
     set JOB_SGMT = 00000032
     set NUM_SGMT = 4
     set ATMOStag = CF0090x6C
     set POST_NDS = 8
endif
if( $GEOSCTM_IM ==  "c180" ) then
     set       DT = 450
     set SOLAR_DT = 3600
     set IRRAD_DT = 3600
     set OCEAN_DT = $IRRAD_DT
     set  CHEM_DT = $DT
     set GEOSCTM_IM  = 180
     set GEOSCTM_JM  = `expr $GEOSCTM_IM \* 6`
     set       NX = 6
     set       NY = `expr $NX \* 6`
     set HYDROSTATIC = TRUE
     set HIST_IM  = `expr $GEOSCTM_IM \* 4`
     set HIST_JM  = `expr $GEOSCTM_IM \* 2 + 1`
     set GRID_FILE = "Gnomonic_c${GEOSCTM_IM}.dat"
     set NUM_READERS = 2
     set JOB_SGMT = 00000016
     set NUM_SGMT = 1
     set ATMOStag = CF0180x6C
     set POST_NDS = 8
endif
if( $GEOSCTM_IM == "c360" ) then
     set       DT = 300
     set SOLAR_DT = 1800
     set IRRAD_DT = 1800
     set OCEAN_DT = $IRRAD_DT
     set  CHEM_DT = $DT
     set GEOSCTM_IM  = 360
     set GEOSCTM_JM  = `expr $GEOSCTM_IM \* 6`
     set       NX = 12 
     set       NY = `expr $NX \* 6`
     set HYDROSTATIC = TRUE
     set HIST_IM  = `expr $GEOSCTM_IM \* 4`
     set HIST_JM  = `expr $GEOSCTM_IM \* 2 + 1`
     set GRID_FILE = "Gnomonic_c${GEOSCTM_IM}.dat"
     set NUM_READERS = 4
     set JOB_SGMT = 00000005
     set NUM_SGMT = 1
     set ATMOStag = CF0360x6C
     set   CNV_NX = 4
     set POST_NDS = 12
endif
if( $GEOSCTM_IM == "c500" ) then
     set       DT = 300
     set SOLAR_DT = 1800
     set IRRAD_DT = 1800
     set OCEAN_DT = $IRRAD_DT
     set  CHEM_DT = $DT
     set GEOSCTM_IM  = 500
     set GEOSCTM_JM  = `expr $GEOSCTM_IM \* 6`
     set       NX = 12
     set       NY = `expr $NX \* 6`
     set HYDROSTATIC = TRUE
     set HIST_IM  = `expr $GEOSCTM_IM \* 4`
     set HIST_JM  = `expr $GEOSCTM_IM \* 2 + 1`
     set GRID_FILE = "Gnomonic_c${GEOSCTM_IM}.dat"
     set NUM_READERS = 4
     set JOB_SGMT = 00000005
     set NUM_SGMT = 1
     set ATMOStag = CF0500x6C
     set   CNV_NX = 8
     set POST_NDS = 12
     set USE_SHMEM = 1
endif
if( $GEOSCTM_IM == "c720" ) then
     set       DT = 225
     set SOLAR_DT = 1800
     set IRRAD_DT = 1800
     set OCEAN_DT = $IRRAD_DT
     set  CHEM_DT = $DT
     set GEOSCTM_IM  = 720
     set GEOSCTM_JM  = `expr $GEOSCTM_IM \* 6`
     set       NX = 16
     set       NY = `expr $NX \* 6`
     set HYDROSTATIC = TRUE
     set HIST_IM  = `expr $GEOSCTM_IM \* 4`
     set HIST_JM  = `expr $GEOSCTM_IM \* 2 + 1`
     set GRID_FILE = "Gnomonic_c${GEOSCTM_IM}.dat"
     set NUM_READERS = 6
     set JOB_SGMT = 00000005
     set NUM_SGMT = 1
     set ATMOStag = CF0720x6C
     set   CNV_NX = 8
     set POST_NDS = 16
     set USE_SHMEM = 1
endif
if( $GEOSCTM_IM == "c1440" ) then
     set       DT = 150
     set SOLAR_DT = 1800
     set IRRAD_DT = 1800
     set OCEAN_DT = $IRRAD_DT
     set  CHEM_DT = $DT
     set GEOSCTM_IM  = 1440
     set GEOSCTM_JM  = `expr $GEOSCTM_IM \* 6`
     set       NX = 30 
     set       NY = `expr $NX \* 6`
     set HYDROSTATIC = FALSE
     set HIST_IM  = `expr $GEOSCTM_IM \* 4`
     set HIST_JM  = `expr $GEOSCTM_IM \* 2 + 1`
     set GRID_FILE = "Gnomonic_c${GEOSCTM_IM}.dat"
     set NUM_READERS = 6
     set JOB_SGMT = 00000001
     set NUM_SGMT = 1
     set ATMOStag = CF1440x6C
     set   CNV_NX = 8
     set POST_NDS = 32
     set USE_SHMEM = 1
endif

set IS_FCST = 0
if($CUBED == "TRUE") then
    set FVCUBED         = ""
    set FVLATLON        = "#DELETE"
    set GEOSCTM_GRIDNAME   = "PE${GEOSCTM_IM}x${GEOSCTM_JM}-CF"
    set RES_DATELINE    = '${GEOSCTM_IM}x${GEOSCTM_JM}'
endif


set BEG_DATE =  '18910301 000000'
set END_DATE =  '29990302 210000'
set JOB_SGMT = "$JOB_SGMT 000000"

#------------------------------------
# Convert DT (in seconds) into HHMMSS
#------------------------------------
set HH = `expr $DT \/ 3600`
set MM = `expr \( $DT \- $HH \* 3600 \) \/ 60`
set SS = `expr $DT \- $HH \* 3600 \- $MM \* 60`
set nhmsDT = `expr $HH \* 10000 \+ $MM \* 100 \+ $SS`
 
#######################################################################
#                   Check for AEROSOL/Chemistry Models
#######################################################################

set ctmTRACER = FALSE
set ctmGOCART = FALSE
set ctmGMI = FALSE
set ctmGEOS_Chem = FALSE
# For Idealized Passive Tracer
set ctmIPT = FALSE

echo "--------------------------------------------------"
echo "Select one of the following experiments by number:"
echo "--------------------------------------------------"
echo "        ${C1} 1${C2} Tracers ${CN} (default)"
echo "        ${C1} 2${C2} GOCART ${CN}"
echo "        ${C1} 3${C2} GMI Chemistry  ${CN}"
echo "        ${C1} 4${C2} GEOS-Chem  ${CN}"
echo "        ${C1} 5${C2} Idealized Passive Tracers  ${CN}"
echo "--------------------------------------------------------"

set gcNUM = ''
GC:
set gcNUM = $<
if( .$gcNUM == . ) then
 set gcNUM = 1
else
 if( $gcNUM < 1 | $gcNUM > 5 ) then
  echo " Sorry. Invalid choice. Try again."
  goto GC
 endif
endif

if($gcNUM == 1) set ctmTRACER = TRUE
if($gcNUM == 2) set ctmGOCART = TRUE
if($gcNUM == 3) set ctmGMI = TRUE
if($gcNUM == 4) set ctmGEOS_Chem = TRUE
if($gcNUM == 5) set ctmIPT = TRUE

if( $ctmGOCART == TRUE ) then
  set GOCART          = ""
  set GOCART_INTERNAL = "GOCART_INTERNAL"
  set HIST_GOCART     = ""

  # Emission Files
  # --------------
EMISSIONS:
  set   EMISSIONS = ''
  echo "Enter the GOCART ${C1}Emission Files${CN} to use: ${C2}MERRA2${CN} (Default), ${C2}PIESA${CN}, ${C2}CMIP${CN}, ${C2}NR${CN}, ${C2}MERRA2-DD${CN} or ${C2}OPS${CN}:"
  set   EMISSIONS = $<
  if( .$EMISSIONS == . ) then
    set   EMISSIONS = MERRA2
  else
    set   EMISSIONS = `echo   $EMISSIONS | tr "[:lower:]" "[:upper:]"`
    if(  $EMISSIONS != CMIP & $EMISSIONS != MERRA2 & $EMISSIONS != NR &  $EMISSIONS != MERRA2-DD & $EMISSIONS != PIESA & $EMISSIONS != OPS ) then
      echo
      echo "${C1}Emission Files${CN} must be equal to:  ${C2}CMIP${CN}, ${C2}MERRA2${CN}, ${C2}NR${CN}, ${C2}MERRA2-DD${CN}, ${C2}PIESA${CN}, or ${C2}OPS${CN}!"
      goto EMISSIONS
    else
      echo
    endif
  endif
  if(  $EMISSIONS == OPS ) set EMISSIONS = ''
else
  # ctmGOCART = FALSE
  # -----------------
  set  AERO_PROVIDER   = PCHEM
  set  EMISSIONS       = ""
  set  GOCART          = "#"
  set  HIST_GOCART     = "#DELETE"
endif

if( $ctmGMI == TRUE ) then
  set GMICHEM          = ""
  set HIST_GMICHEM     = ""
else
  # ctmGMI = FALSE
  # --------------
  set  GMICHEM         = "#"
  set  HIST_GMICHEM    = "#DELETE"
endif

if( $ctmGEOS_Chem == TRUE ) then
  set doGEOSCHEMCHEM     = "YES"
  set GEOSCHEMCHEM       = ""
  set HIST_GEOSCHEMCHEM  = ""
else
  # ctmGEOS_chem = FALSE
  # --------------
  set GEOSCHEMCHEM      = "#"
  set doGEOSCHEMCHEM    = "NO"
  set HIST_GEOSCHEMCHEM = "#DELETE"
endif

if ($ctmTRACER == TRUE ) then
  set passiveTracer          = ""
  set HIST_passiveTracer     = ""
else
  set passiveTracer       = "#"
  set HIST_passiveTracer  = "#DELETE"
endif

if ($ctmIPT == TRUE ) then
  set doIdealizedPT        = "YES"
  set IdealizedPT          = ""
  set HIST_IdealizedPT     = ""
else
  set doIdealizedPT        = "NO"
  set IdealizedPT          = "#"
  set HIST_IdealizedPT     = "#DELETE"
endif


# AERO Provider
# -------------
if($ctmGMI == TRUE) then
 echo "---------------------------------------"
 echo "Select the AEROsols provider by number:"
 echo "---------------------------------------"
 echo "        ${C1} 1${C2} GOCART.data ${CN} (default)"
 echo "        ${C1} 2${C2} GMICHEM ${CN}"
 echo "---------------------------------------"
 set apNUM = ''
 APGMI:
 set apNUM = $<
 if( .$apNUM == . ) then
  set apNUM = 1
 else
  if( $apNUM < 1 | $apNUM > 2 ) then
   echo " Sorry. Invalid choice. Try again."
   goto APGMI
  endif
 endif
 if($apNUM == 1) set AERO_PROVIDER = GOCART.data
 if($apNUM == 2) set AERO_PROVIDER = GMICHEM
endif

if( $ctmGEOS_Chem == TRUE ) then
  set  AERO_PROVIDER   = GOCART
  set  RATS_PROVIDER   = PCHEM
  set  OANA_PROVIDER   = PCHEM
endif


# Default Providers
# -----------------
if( $ctmGOCART == TRUE ) then
  set  AERO_PROVIDER   = GOCART
  set  RATS_PROVIDER   = PCHEM
  set  OANA_PROVIDER   = PCHEM
endif
if( $ctmGMI == TRUE ) then
  set  RATS_PROVIDER   = GMICHEM
  set  OANA_PROVIDER   = GMICHEM
endif
if( $ctmTRACER == TRUE ) then
  set  AERO_PROVIDER   = GOCART.data
  set  RATS_PROVIDER   = PCHEM
  set  OANA_PROVIDER   = PCHEM
endif

if( $ctmIPT == TRUE ) then
  set  AERO_PROVIDER   = 
  set  RATS_PROVIDER   =  
  set  OANA_PROVIDER   =  
endif

set PCHEM = "#"
if( $RATS_PROVIDER == PCHEM || $OANA_PROVIDER == PCHEM ) set PCHEM = ""

# DRIVING Datasets
# ----------------
DATASETS:
echo " "
echo "------------------------------------------------------"
echo "Select your analysis"
echo "------------------------------------------------------"
echo "    ${C1}MERRA2${C2}   Online${CN} (default)"
echo "    ${C1}MERRA1${C2}   Online${CN}*"
echo "    ${C1}FPIT${C2}     Online (few months)${CN}*"
echo "    ${C1}F515_516${C2} Online${CN}*"
echo "    ${C1}F5131${C2}    Online${CN}*"
echo "------------------------------------------------------"
set DRIVING_DATASETS  = $<
if( .$DRIVING_DATASETS == . ) then
  set  DRIVING_DATASETS = MERRA2
else
  set   DRIVING_DATASETS  = `echo  $DRIVING_DATASETS | tr "[:lower:]" "[:upper:]"`
  if(  $DRIVING_DATASETS != MERRA2 & $DRIVING_DATASETS != MERRA1 & $DRIVING_DATASETS != FPIT & $DRIVING_DATASETS != F515_516 & $DRIVING_DATASETS != F5131) then
    echo
    echo "The ${C1}Driving Datasets${CN} must be equal to ${C2}MERRA2${CN} or ${C2}MERRA1${CN} or ${C2}FPIT${CN} or ${C2}F515_516${CN} or ${C2}F5131${CN}!"
    goto DATASETS
  else
    echo
  endif
endif

#######################################################################
#                  Architecture Specific Variables
#######################################################################

@ NPES = $NX * $NY
@ CNV_NPES = $CNV_NX * $CNV_NY
# Here we need to convert POST_NDS to total tasks. Using 16 cores
# per task as a good default
@ POST_NPES = $POST_NDS * 16

              setenv     RUN_N  `echo $EXPID | cut -b1-11`_RUN                         # RUN      Job Name
              setenv     RUN_FN `echo $EXPID | cut -b1-11`_FCST                        # Forecast Job Name
              setenv    POST_N  `echo $EXPID | cut -b1-10`_POST                        # POST     Job Name
              setenv    PLOT_N  `echo $EXPID | cut -b1-11`_PLT                         # PLOT     Job Name
              setenv    MOVE_N  `echo $EXPID | cut -b1-11`_MOVE                        # MOVE     Job Name
              setenv ARCHIVE_N  `echo $EXPID | cut -b1-10`_ARCH                        # ARCHIVE  Job Name
              setenv REGRESS_N  `echo $EXPID | cut -b1-10`_RGRS                        # REGRESS  Job Name
              setenv CONVERT_N  `echo $EXPID | cut -b1-11`_CNV                         # CONVERT  Job Name

# Default converter time
              setenv CONVERT_T  "0:15:00"                                              # Wallclock Time   for ctm_convert.j

if( $SITE == 'NAS' ) then
              setenv BATCH_GROUP "PBS -W group_list="                                  # PBS Syntax for GROUP
              setenv     RUN_FT "6:00:00"                                              # Wallclock Time   - UNUSED
              setenv     RUN_T  "8:00:00"                                              # Wallclock Time   for ctm_run.j
              setenv    POST_T  "8:00:00"                                              # Wallclock Time   for ctm_post.j
              setenv    PLOT_T  "8:00:00"                                              # Wallclock Time   for ctm_plot.j
              setenv ARCHIVE_T  "8:00:00"                                              # Wallclock Time   for ctm_archive.j
              if( $GPU == "TRUE" ) then
                 set NCPUS = 16                                                        # CPUS per node
                 set MODEL = "san_gpu"                                                 # Model of CPU
                 set QTYPE = "gpu_k40"                                                 # Queue to use
              else
                 set NCPUS = 28                                                        # CPUS per node
                 set MODEL = "bro"                                                     # Model of CPU
                 set QTYPE = "normal"                                                  # Queue to use
              endif
              @ NCUS = `echo "($NPES + $NCPUS - 1)/$NCPUS" | bc`
              setenv     RUN_Q  "PBS -q ${QTYPE}"                                                           # batch queue name for ctm_run.j
              setenv     RUN_P  "PBS -l select=${NCUS}:ncpus=${NCPUS}:mpiprocs=${NCPUS}:model=${MODEL}"     # PE Configuration for ctm_run.j
              setenv    RUN_FP  "PBS -l select=24:ncpus=${NCPUS}:mpiprocs=${NCPUS}:model=${MODEL}"          # PE Configuration - UNUSED
              setenv    POST_Q  "PBS -q normal"                                                             # batch queue name for ctm_post.j
              setenv    PLOT_Q  "PBS -q normal"                                                             # batch queue name for ctm_plot.j
              setenv    MOVE_Q  "PBS -q normal"                                                             # batch queue name for ctm_moveplot.j
              setenv ARCHIVE_Q  "PBS -q normal"                                                             # batch queue name for ctm_archive.j
              setenv    POST_P  "PBS -l select=${POST_NDS}:ncpus=${NCPUS}:mpiprocs=${NCPUS}:model=${MODEL}" # PE Configuration for ctm_post.j
              setenv    PLOT_P  "PBS -l select=2:ncpus=${NCPUS}:mpiprocs=${NCPUS}:model=${MODEL}"           # PE Configuration for ctm_plot.j
              setenv ARCHIVE_P  "PBS -l select=1:ncpus=${NCPUS}:mpiprocs=${NCPUS}:model=${MODEL}"           # PE Configuration for ctm_archive.j
              setenv CONVERT_P  "PBS -l select=${CNV_NX}:ncpus=${NCPUS}:mpiprocs=${NCPUS}:model=${MODEL}"   # PE Configuration for ctm_convert.j
              setenv BCSDIR     /nobackup/gmao_SIteam/ModelData/bcs/Icarus/$BCSTAG                          # location of Boundary Conditions
              setenv CHMDIR     /nobackup/gmao_SIteam/ModelData/fvInput_nc3            # locations of Aerosol Chemistry BCs
              setenv WRKDIR     /nobackup/$LOGNAME                                     # user work directory
              setenv COUPLEDIR  /nobackup/gmao_SIteam/ModelData/coupled/Forcings       # Coupled Ocean/Atmos Forcing - UNUSED
              setenv CPEXEC    'mcp -a'                                                # Copy utility for large copies
              setenv TAREXEC    mtar                                                   # Tar utility for large archives
else if( $SITE == 'NCCS' ) then
              setenv BATCH_GROUP "SBATCH -A "                                          # PBS Syntax for GROUP
              setenv     RUN_FT "06:00:00"                                             # Wallclock Time   - UNUSED
              setenv     RUN_T  "12:00:00"                                             # Wallclock Time   for ctm_run.j
              setenv    POST_T  "8:00:00"                                              # Wallclock Time   for ctm_post.j
              setenv    PLOT_T  "12:00:00"                                             # Wallclock Time   for ctm_plot.j
              setenv ARCHIVE_T  "2:00:00"                                              # Wallclock Time   for ctm_archive.j
              if( $GPU == "TRUE" ) then
                 setenv  RUN_Q  "SBATCH --constraint=k40"                              # batch queue name for ctm_run.j
              else
                 setenv  RUN_Q  "SBATCH --constraint=hasw"                             # batch queue name for ctm_run.j
              endif
              setenv    RUN_P   "SBATCH --ntasks=${NPES}"                              # PE Configuration for ctm_run.j
              setenv    RUN_FP  "SBATCH --ntasks=\&NPES"                               # PE Configuration - UNUSED
              setenv    POST_Q  "SBATCH --constraint=hasw"                             # batch queue name for ctm_post.j
              setenv    PLOT_Q  "SBATCH --constraint=hasw"                             # batch queue name for ctm_plot.j
              setenv    MOVE_Q  "SBATCH --partition=datamove"                          # batch queue name for ctm_moveplot.j
              setenv ARCHIVE_Q  "SBATCH --partition=datamove"                          # batch queue name for ctm_archive.j
              setenv    POST_P  "SBATCH --ntasks=${POST_NPES}"                         # PE Configuration for ctm_post.j
              setenv    PLOT_P  "SBATCH --nodes=4 --ntasks=4"                          # PE Configuration for ctm_plot.j
              setenv ARCHIVE_P  "SBATCH --ntasks=1"                                    # PE Configuration for ctm_archive.j
              setenv CONVERT_P  "SBATCH --ntasks=${CNV_NPES}"                          # PE Configuration for ctm_convert.j
              setenv BCSDIR     /discover/nobackup/ltakacs/bcs/Icarus/$BCSTAG          # location of Boundary Conditions
              setenv CHMDIR     $SHARE/dao_ops/fvInput_nc3                             # locations of Aerosol Chemistry BCs
              setenv WRKDIR     /discover/nobackup/$LOGNAME                            # user work directory
              setenv COUPLEDIR  /discover/nobackup/yvikhlia/coupled/Forcings           # Coupled Ocean/Atmos Forcing - UNUSED
              setenv CPEXEC     /bin/cp                                                # Copy utility for large copies
              setenv TAREXEC    tar                                                    # Tar utility for large archives
else
# These are defaults for the desktop
              setenv BATCH_GROUP "SBATCH -A "                                          # PBS Syntax for GROUP
              setenv     RUN_FT "06:00:00"                                             # Wallclock Time   - UNUSED
              setenv     RUN_T  "12:00:00"                                             # Wallclock Time   for ctm_run.j
              setenv    POST_T  "8:00:00"                                              # Wallclock Time   for ctm_post.j
              setenv    PLOT_T  "12:00:00"                                             # Wallclock Time   for ctm_plot.j
              setenv ARCHIVE_T  "1:00:00"                                              # Wallclock Time   for ctm_archive.j
              setenv  RUN_Q     NULL                                                   # batch queue name for ctm_run.j
              setenv  RUN_P     NULL                                                   # PE Configuration for ctm_run.j
              setenv  RUN_FP    NULL                                                   # PE Configuration - UNUSED
              setenv    POST_Q  NULL                                                   # batch queue name for ctm_post.j
              setenv    PLOT_Q  NULL                                                   # batch queue name for ctm_plot.j
              setenv    MOVE_Q  NULL                                                   # batch queue name for ctm_moveplot.j
              setenv ARCHIVE_Q  NULL                                                   # batch queue name for ctm_archive.j
              setenv    POST_P  NULL                                                   # PE Configuration for ctm_run.j
              setenv    PLOT_P  NULL                                                   # PE Configuration for ctm_post.j
              setenv ARCHIVE_P  NULL                                                   # PE Configuration for ctm_archive.j
              setenv CONVERT_P  NULL                                                   # PE Configuration for ctm_convert.j
              setenv BCSDIR     /ford1/share/gmao_SIteam/ModelData/bcs/Icarus/$BCSTAG  # location of Boundary Conditions
              setenv CHMDIR     /ford1/share/gmao_SIteam/ModelData/fvInput_nc3         # locations of Aerosol Chemistry BCs
              setenv WRKDIR     /home/$LOGNAME                                         # user work directory
              setenv COUPLEDIR  /ford1/share/gmao_SIteam/ModelData/Forcings            # Coupled Ocean/Atmos Forcing - UNUSED
              if( $CUBED == "TRUE" ) then
                 set NX = 1
                 set NY = 6
              else
                 set NX = 2
                 set NY = 4
              endif
              set CNV_NX = ${NX}
              set CNV_NY = ${NY}
              setenv RUN_CMD 'mpirun -oversubscribe -np '                              # mpi run for DESKTOP (assumes OpenMPI)
              setenv CPEXEC     /bin/cp                                                # Copy utility for large copies
              setenv TAREXEC    tar                                                    # Tar utility for large archives
endif


#######################################################################
#                    Create Desired HISTORY template
#         Note: Default HISTORY will be kept in $HOME/.HISTORYrc
#######################################################################

    set check =  FALSE
while( $check == FALSE )
  if( -e $HOME/.HISTORYrc ) then
            set HISTORYrc = `cat $HOME/.HISTORYrc`
  else
            set HISTORYrc = Current
          echo $HISTORYrc > $HOME/.HISTORYrc
  endif

  echo "Enter the tag or directory (/filename) of the ${C1}HISTORY.GEOSCTM.rc.tmpl${CN} to use"
  echo "(To use ${C1}HISTORY.GEOSCTM.rc.tmpl${CN} from current build, Type:  ${C2}Current${CN}         )"
  echo "-------------------------------------------------------------------------"
  echo "Hit ENTER to use Default Tag/Location: (${C2}${HISTORYrc}${CN})"
  set   NUHISTORY  = $<
  if( .$NUHISTORY != . ) set HISTORYrc = $NUHISTORY
  if( -e $BINDIR/HISTORY.rc.hold ) /bin/mv -f $BINDIR/HISTORY.rc.hold $BINDIR/HISTORY.rc.tmpl
  if( -e $BINDIR/HISTORY.rc.tmpl ) /bin/mv -f $BINDIR/HISTORY.rc.tmpl $BINDIR/HISTORY.rc.hold

  if( "$HISTORYrc" == "Current" ) then
            set check = TRUE
            if( -e $HOME/.HISTORYrc ) /bin/rm $HOME/.HISTORYrc
            echo $HISTORYrc >                 $HOME/.HISTORYrc
            /bin/cp -f $BINDIR/HISTORY.GEOSCTM.rc.tmpl $BINDIR/HISTORY.rc.tmpl
  endif

  if( "$HISTORYrc" != "Current" ) then
       if( -f $HISTORYrc ) then
            set check = TRUE
            if( -e $HOME/.HISTORYrc ) /bin/rm $HOME/.HISTORYrc
            echo $HISTORYrc >                 $HOME/.HISTORYrc
            /bin/cp -f $ETCDIR/$HISTORYrc $BINDIR/HISTORY.rc.tmp1

            set  EXPID_old = `grep  "EXPID:" $BINDIR/HISTORY.rc.tmp1 | cut -d: -f2`
            set EXPDSC_old = `grep "EXPDSC:" $BINDIR/HISTORY.rc.tmp1 | cut -d: -f2`

            /bin/rm -f command
            set  string = "EXPID:"
            echo cat $BINDIR/HISTORY.rc.tmp1 \| awk \'\{if \( \$1 \~ \"${string}\" \) \
                 \{sub \( \"${EXPID_old}\" , \"${EXPID}\"  \)\;print\} else print\}\' \> $BINDIR/HISTORY.rc.tmpl > command
            chmod +x   command
                     ./command
            /bin/rm -f command
            /bin/mv -f $BINDIR/HISTORY.rc.tmpl $BINDIR/HISTORY.rc.tmp1
                   cat $BINDIR/HISTORY.rc.tmp1 | sed -e "s|${EXPDSC_old}|${EXPDSC}|g" > $BINDIR/HISTORY.rc.tmpl
            /bin/rm -f $BINDIR/HISTORY.rc.tmp1

       else if( -e $HISTORYrc/HISTORY.GEOSCTM.rc.tmpl ) then
            set check = TRUE
            if( -e $HOME/.HISTORYrc ) /bin/rm $HOME/.HISTORYrc
            echo $HISTORYrc >                 $HOME/.HISTORYrc
            /bin/cp -f $HISTORYrc/HISTORY.GEOSCTM.rc.tmpl $BINDIR/HISTORY.rc.tmpl
       else
            echo "This condition is based on updating HISTORY.AGCM.rc.tmpl with CVS"
            echo "This has no equivalent in git at present. Please contact Matt"
            echo "Thompson or Larry Takacs to help resolve this."
            exit 2
       endif
  endif
end

#######################################################################
#                 Create Paths for HOME and EXP Directories
#         Note: Default Path will be kept in $HOME/.HOMDIRroot
#######################################################################

# HOME Directory (for scripts and RC files)
# -----------------------------------------
    set check =  FALSE
while( $check == FALSE )
  if( -e $HOME/.HOMDIRroot ) then
         set HOMDIRroot = `cat $HOME/.HOMDIRroot`
  else
         set HOMDIRroot = $HOME/geos5
  endif

  setenv HOMDIR_def $HOMDIRroot/$EXPID
  echo " "
  echo "Enter Desired Location for the ${C1}HOME${CN} Directory (to contain scripts and RC files)"
  echo "Hit ENTER to use Default Location:"
  echo "----------------------------------"
  echo "Default:  ${C2}${HOMDIR_def}${CN}"
  set   NUHOMDIR  = $<
  if( .$NUHOMDIR != . ) then
       setenv HOMDIR     $NUHOMDIR
       setenv HOMDIR_def $NUHOMDIR
  else
       setenv HOMDIR  $HOMDIR_def
  endif
  
  if( "$EXPID" != `basename $HOMDIR` ) then
       echo "\!\! The ${C1}HOME${CN} Directory MUST point to the ${C1}EXPID${CN}: ${C2}${EXPID}${CN}"
       echo " "
  else
      set check = TRUE
  endif
end
mkdir -p $HOMDIR


# EXP Directory (for Output Data and Restarts)
# --------------------------------------------
    set check =  FALSE
while( $check == FALSE )
  if( -e $HOME/.EXPDIRroot ) then
         set EXPDIRroot = `cat $HOME/.EXPDIRroot`
  else
         set EXPDIRroot = $WRKDIR
  endif
  setenv EXPDIR_def $EXPDIRroot/$EXPID
  echo ""
  echo "Enter Desired Location for the ${C1}EXPERIMENT${CN} Directory (to contain model output and restart files)"
  echo "Hit ENTER to use Default Location:"
  echo "----------------------------------"
  echo "Default:  ${C2}${EXPDIR_def}${CN}"
  set   NUEXPDIR  = $<
  if( .$NUEXPDIR != . ) then
       setenv EXPDIR     $NUEXPDIR
       setenv EXPDIR_def $NUEXPDIR
  else
       setenv EXPDIR  $EXPDIR_def
  endif
  
  if( "$EXPID" != `basename $EXPDIR` ) then
       echo "\!\! The ${C1}EXPERIMENT${CN} Directory MUST point to the ${C1}EXPID${CN}: ${C2}${EXPID}${CN}"
       echo " "
  else
      set check = TRUE
  endif
end
mkdir -p $EXPDIR



# Build HOME Root Directory
# -------------------------
@ n = 1
set root = `echo $HOMDIR | cut -d / -f$n`
while( .$root == . )
@ n = $n + 1
set root = `echo $HOMDIR | cut -d / -f$n`
end

set HOMDIRroot = ''
while( $root != $EXPID )
set HOMDIRroot = `echo ${HOMDIRroot}/${root}`
@ n = $n + 1
set root = `echo $HOMDIR | cut -d / -f$n`
end
if( -e $HOME/.HOMDIRroot ) /bin/rm $HOME/.HOMDIRroot
echo $HOMDIRroot > $HOME/.HOMDIRroot


# Build EXP Root Directory
# ------------------------
@ n = 1
set root = `echo $EXPDIR | cut -d / -f$n`
while( .$root == . )
@ n = $n + 1
set root = `echo $EXPDIR | cut -d / -f$n`
end

set EXPDIRroot = ''
while( $root != $EXPID )
set EXPDIRroot = `echo ${EXPDIRroot}/${root}`
@ n = $n + 1
set root = `echo $EXPDIR | cut -d / -f$n`
end
if( -e $HOME/.EXPDIRroot ) /bin/rm $HOME/.EXPDIRroot
echo $EXPDIRroot > $HOME/.EXPDIRroot

# Set CNVDIR alias
# ----------------

setenv CNVDIR $EXPDIR/convert

#######################################################################
#                       Locate Build Directory  
#######################################################################

# GEOSctm Build Directory
# ------------------------
  echo "Enter Location for ${C1}Build${CN} directory containing:  bin/ etc/ include/ etc..."
  echo "Hit ENTER to use Default Location:"
  echo "----------------------------------"
  echo "Default:  ${C2}${GEOSDEF}${CN}"

  set     GEOSDIR  = $GEOSDEF
  set   NUGEOSDIR  = $<
  if( .$NUGEOSDIR != . ) then
       set GEOSDIR = $NUGEOSDIR
  endif
  
    set check =  FALSE
GEOSDIR:
while( $check == FALSE )

  if(! (-e $GEOSDIR/bin ) ) then
       echo " "
       echo "\!\! ${C1}WARNING${CN} \!\!"
       echo "\!\! This Sandbox has not been built"
       echo "\!\! Please enter a valid location for the ${C1}GEOSctm Build${CN}"
       echo "\!\! or ... "
       echo "\!\! Enter ${C1}C${CN} to continue without a Build"
       echo " "

       set        NUGEOSDIR  = $<
       if(      .$NUGEOSDIR == . ) then
              set   GEOSDIR  = $GEOSDEF

       else if( .$NUGEOSDIR == .C | .$NUGEOSDIR == .c ) then
                set GEOSDIR  = $GEOSDEF
                set check    = TRUE
       else
                set GEOSDIR = $NUGEOSDIR
       endif

       goto GEOSDIR
  else
       set check = TRUE
  endif
end

setenv GEOSSRC  ${GEOSDIR}
setenv GEOSBIN  ${GEOSDIR}/bin
setenv GEOSETC  ${GEOSDIR}/etc
setenv GEOSUTIL ${GEOSSRC}
setenv CTMVER   `cat ${GEOSETC}/.GEOSCTM_VERSION`

#######################################################################
#                    Check for Group ID Sponsor Code
#         Note: Default GROUP will be kept in $HOME/.GROUProot
#######################################################################

       set GROUPS    = `groups`
if( -e $HOME/.GROUProot ) then
       set GROUProot = `cat $HOME/.GROUProot`
else
       set GROUProot = $GROUPS[1]
endif

echo " "
echo "Current GROUPS: ${GROUPS}"
echo "Enter your ${C1}GROUP ID${CN} for Current EXP: (Default: ${C2}${GROUProot}${CN})"
echo "-----------------------------------"
set   NUGROUP  = $<
if( .$NUGROUP != . ) then
     setenv GROUP $NUGROUP
else
     setenv GROUP $GROUProot
endif

if( -e $HOME/.GROUProot ) /bin/rm $HOME/.GROUProot
echo $GROUP > $HOME/.GROUProot

#######################################################################
#      Copy Model Executable and RC Files to Experiment Directory
#######################################################################

  mkdir -p                                                   $EXPDIR/RC
  rsync -ax                  $GEOSDIR/etc/*.rc               $EXPDIR/RC
  if( .$EMISSIONS != . ) then
                     /bin/cp $GEOSDIR/etc/$EMISSIONS/*.rc    $EXPDIR/RC
  else
    set EMISSIONS = g5chem
  endif

  if ( -e $GEOSBIN/GEOSctm.x ) rsync -avx $GEOSBIN/GEOSctm.x $EXPDIR

#######################################################################
#                      Create SETENV Commands
#######################################################################

/bin/rm -f $HOMDIR/SETENV.commands

if( $MPI == openmpi ) then

# This turns off an annoying warning when running
# Open MPI on a system where TMPDIRs are on a networked
# file system

cat > $HOMDIR/SETENV.commands << EOF
   setenv OMPI_MCA_shmem_mmap_enable_nfs_warning 0
EOF

# The below settings seem to be recommended for hybrid
# systems using MVAPICH2 but could change

else if( $MPI == mvapich2 ) then

if( $GPU == "TRUE" ) then
cat > $HOMDIR/SETENV.commands << EOF
   #setenv MV2_ON_DEMAND_THRESHOLD 8192
   #setenv MV2_USE_SHMEM_ALLREDUCE 0
   #setenv MV2_USE_SHMEM_COLL      0
   setenv MV2_ENABLE_AFFINITY     0
   setenv MV2_RNDV_PROTOCOL       RPUT
   setenv MV2_USE_RDMA_ONE_SIDED  1
   setenv SLURM_DISTRIBUTION block
EOF

else

cat > $HOMDIR/SETENV.commands << EOF
   #setenv MV2_ON_DEMAND_THRESHOLD 8192
   #setenv MV2_USE_SHMEM_ALLREDUCE 0
   #setenv MV2_USE_SHMEM_COLL      0
   #setenv MV2_USE_UD_HYBRID       0
   setenv MV2_ENABLE_AFFINITY     0
   setenv SLURM_DISTRIBUTION block
EOF

endif # if GPU and mvapich2

else if( $MPI == mpt ) then

cat > $HOMDIR/SETENV.commands << EOF

   setenv MPI_COLL_REPRODUCIBLE
   setenv SLURM_DISTRIBUTION block

   setenv MPI_XPMEM_ENABLED no
   setenv SUPPRESS_XPMEM_TRIM_THRESH 1
   setenv MPI_NUM_MEMORY_REGIONS 0
   
   #setenv MPI_DISPLAY_SETTINGS 1
   #setenv MPI_VERBOSE 1
   
   setenv MPI_COMM_MAX  1024
   setenv MPI_GROUP_MAX 1024
   setenv MPI_BUFS_PER_PROC 256
   
   setenv MPI_IB_TIMEOUT 23

   # For some reason, PMI_RANK is randomly set and interferes
   # with binarytile.x and other executables.
   unsetenv PMI_RANK

EOF

else if( $MPI == intelmpi ) then

cat > $HOMDIR/SETENV.commands << EOF
setenv I_MPI_DAPL_UD enable
EOF

endif # if mpi

#######################################################################
#                      Create GPU Hyper-Q Commands
#######################################################################

/bin/rm -f $HOMDIR/GPUSTART.commands
/bin/rm -f $HOMDIR/GPUEND.commands

if ( $GPU == "TRUE" ) then

cat > $HOMDIR/GPUSTART.commands << _EOF_

# Set up the MPS Server on Each GPU Node
# --------------------------------------
_EOF_

if ( $SITE == 'NCCS' ) then

cat >> $HOMDIR/GPUSTART.commands << _EOF1_

setenv GPU_NODELIST \`scontrol show hostnames\` 
setenv CUDA_TMPDIR /tmp/nvidia-hyperq-\$SLURM_JOBID 

_EOF1_

else if ( $SITE == 'NAS' ) then

cat >> $HOMDIR/GPUSTART.commands << _EOF1_

setenv GPU_NODELIST \`cat \$PBS_NODEFILE | uniq\` 
setenv CUDA_TMPDIR /tmp/nvidia-hyperq-\$PBS_JOBID 

_EOF1_

endif # if site

cat >> $HOMDIR/GPUSTART.commands << _EOF2_
setenv CUDA_VISIBLE_DEVICES 0 
setenv CUDA_MPS_CLIENT 1 
setenv CUDA_MPS_PIPE_DIRECTORY \$CUDA_TMPDIR/mps_0 
setenv CUDA_MPS_LOG_DIRECTORY  \$CUDA_TMPDIR/mps_log_0 
 
foreach node (\$GPU_NODELIST) 
   ssh -f \$node "env CUDA_TMPDIR=\$CUDA_TMPDIR $HOME/bin/kill_mps_server.bash" 
end 
 
sleep 3 
 
foreach node (\$GPU_NODELIST) 
   echo "Running MPS Server on \$node" 
   ssh -f \$node "env CUDA_TMPDIR=\$CUDA_TMPDIR $HOME/bin/run_mps_server.bash" 
end 
 
sleep 3 

_EOF2_

cat > $HOMDIR/GPUEND.commands << _EOF3_
# Remove the MPS Server on Each GPU Node
# --------------------------------------

foreach node (\$GPU_NODELIST) 
   ssh -f \$node "env CUDA_TMPDIR=\$CUDA_TMPDIR $HOME/bin/kill_mps_server.bash" 
end 

_EOF3_

endif

#######################################################################
#               Create Local Scripts and Resource Files
#######################################################################

cat >      $HOMDIR/sedfile << EOF
/@SETENVS/ {
t success
: success
r $HOMDIR/SETENV.commands
d
}

/@GPUSTART/ {
t success1
: success1
r $HOMDIR/GPUSTART.commands
d
}

/@GPUEND/ {
t success2
: success2
r $HOMDIR/GPUEND.commands
d
}

s?@CTMVER?$CTMVER?g
s?@EXPSRC?$CTMTAG?g
s?@EXPID?$EXPID?g
s?@RUN_N?$RUN_N?g
s?@RUN_FN?$RUN_FN?g
s?@RUN_FT?$RUN_FT?g
s?@RUN_T?$RUN_T?g
s?@RUN_P?$RUN_P?g
s?@RUN_FP?$RUN_FP?g
s?@RUN_Q?$RUN_Q?g
s?@POST_N?$POST_N?g
s?@POST_T?$POST_T?g
s?@POST_P?$POST_P?g
s?@POST_Q?$POST_Q?g
s?@MOVE_N?$MOVE_N?g
s?@PLOT_N?$PLOT_N?g
s?@PLOT_T?$PLOT_T?g
s?@PLOT_P?$PLOT_P?g
s?@PLOT_Q?$PLOT_Q?g
s?@MOVE_Q?$MOVE_Q?g
s?@ARCHIVE_N?$ARCHIVE_N?g
s?@ARCHIVE_T?$ARCHIVE_T?g
s?@ARCHIVE_P?$ARCHIVE_P?g
s?@ARCHIVE_Q?$ARCHIVE_Q?g
s?@REGRESS_N?$REGRESS_N?g
s?@CONVERT_N?$CONVERT_N?g
s?@CONVERT_P?$CONVERT_P?g
s?@CONVERT_T?$CONVERT_T?g
s?@CNV_NX?$CNV_NX?g
s?@CNV_NY?$CNV_NY?g
s?@BCSDIR?$BCSDIR?g
s?@CHMDIR?$CHMDIR?g
s?@EXPDIR?$EXPDIR?g
s?@EXPDSC?$EXPDSC?g
s?@HOMDIR?$HOMDIR?g
s?@CNVDIR?$CNVDIR?g
s?@BATCH_GROUP?${BATCH_GROUP}${GROUP}?g
s?@SITE?$SITE?g
s?@GEOSDIR?$GEOSDIR?g
s?@GEOSSRC?$GEOSSRC?g
s?@GEOSBIN?$GEOSBIN?g
s?@GEOSETC?$GEOSETC?g
s?@GEOSUTIL?$GEOSUTIL?g
s?@RUN_CMD?$RUN_CMD?g

s?@CHECKPOINT_TYPE?default?g

s?@OBSERVER_FRQ?0?g
s?RECORD_?#RECORD_?g

s?>>>FORCEDAS<<<?$FORCEDAS?g
s?>>>FORCEGCM<<<?$FORCEGCM?g
s?>>>PCHEM<<<?$PCHEM?g
s?>>>GOCART<<<?$GOCART?g
s?>>>GMICHEM<<<?$GMICHEM?g
s?>>>GEOSCHEMCHEM<<<?$GEOSCHEMCHEM?g
s?>>>passiveTracer<<<?$passiveTracer?g
s?>>>IdealizedPT<<<?$IdealizedPT?g
s?>>>FVCUBED<<<?$FVCUBED?g
s?>>>FVLATLON<<<?$FVLATLON?g
s?>>>HIST_GOCART<<<?$HIST_GOCART?g
s?>>>HIST_GMICHEM<<<?$HIST_GMICHEM?g
s?>>>HIST_GEOSCHEMCHEM<<<?$HIST_GEOSCHEMCHEM?g
s?>>>HIST_passiveTracer<<<?$HIST_passiveTracer?g
s?>>>HIST_IdealizedPT<<<?$HIST_IdealizedPT?g

s?>>>4DIAUDAS<<<?#DELETE?g
s?>>>REGULAR_REPLAY<<<?#?g
s?>>>REGULAR_REPLAY_GMAO<<<?#?g
s?>>>REGULAR_REPLAY_NCEP<<<?#DELETE?g
s?>>>REGULAR_REPLAY_ECMWF<<<?#DELETE?g
s?ana4replay.eta.%y4%m2%d2_%h2z.nc4?/discover/nobackup/projects/gmao/share/gmao_ops/verification/MERRA2_MEANS/ana/Y%y4/M%m2/MERRA-2.ana.eta.%y4%m2%d2_%h2z.nc4?g

s?@OX_RELAXTIME?259200.?g
s?@PCHEM_CLIM_YEARS?228?g

s?@RATS_PROVIDER?$RATS_PROVIDER?g
s?@AERO_PROVIDER?$AERO_PROVIDER?g
s?@OANA_PROVIDER?$OANA_PROVIDER?g
s?@EMISSIONS?$EMISSIONS?g

s^@DYCORE^$DYCORE^g
s^@GEOSCTM_GRIDNAME^$GEOSCTM_GRIDNAME^g

s^@DRIVING_DATASETS^$DRIVING_DATASETS^g

s^@doIdealizedPT^$doIdealizedPT^g
s^@doGEOSCHEMCHEM^$doGEOSCHEMCHEM^g

s?@IS_FCST?$IS_FCST?g
s^@BOOT^YES^g
s^@RES_DATELINE^$RES_DATELINE^g
s/@DT/$DT/g
s/@nhmsDT/$nhmsDT/g
s/@SOLAR_DT/$SOLAR_DT/g
s/@IRRAD_DT/$IRRAD_DT/g
s/@CHEM_DT/$CHEM_DT/g
s/@NX/$NX/g
s/@NY/$NY/g
s/@USE_SHMEM/$USE_SHMEM/g
s/@NUM_READERS/$NUM_READERS/g
s/@NUM_WRITERS/$NUM_WRITERS/g
s/@GEOSCTM_IM/$GEOSCTM_IM/g
s/@GEOSCTM_JM/$GEOSCTM_JM/g
s/@GEOSCTM_LM/$GEOSCTM_LM/g
s/@BEG_DATE/${BEG_DATE}/g
s/@END_DATE/${END_DATE}/g 
s/@JOB_SGMT/${JOB_SGMT}/g
s/@NUM_SGMT/${NUM_SGMT}/g

s/@HIST_IM/$HIST_IM/g
s/@HIST_JM/$HIST_JM/g

s/@ISCCP_SATSIM/0/g
s/@MODIS_SATSIM/0/g
s/@RADAR_SATSIM/0/g
s/@LIDAR_SATSIM/0/g
s/@MISR_SATSIM/0/g
s/@SATSIM/0/g

s?@CPEXEC?$CPEXEC?g
s?@TAREXEC?$TAREXEC?g

EOF

# Added FV3 Specific Parameters
# -----------------------------
if($CUBED == "TRUE") then

cat >> $HOMDIR/sedfile << EOF

s^@HYDROSTATIC^$HYDROSTATIC^g
s/@GRID_FILE/$GRID_FILE/g

EOF
endif

set FILES = "ctm_run.j          \
             ctm_post.j         \
             ctm_archive.j      \
             ctm_regress.j      \
             ctm_convert.j      \
             ctm_plot.tmpl      \
             ctm_quickplot.csh  \
             ctm_moveplot.j     \
             CAP.rc.tmpl        \
             GEOSCTM.rc.tmpl       \
             HISTORY.rc.tmpl    \
             CTM_GridComp.rc.tmpl \
             pTracers_GridComp.rc.tmpl \
             FP_ExtData.rc.tmpl \
             FPIT_ExtData.rc.tmpl \
             MERRA1_ExtData.rc.tmpl \
             MERRA2_ExtData.rc.tmpl "
set FILES = `echo $FILES`

if($CUBED == "TRUE") then
set FILES = "$FILES \
             fvcore_layout.rc"
set FILES = `echo $FILES`
endif

echo " "

# Operate on files in BINDIR

foreach FILE ($FILES)

   /bin/rm -f $HOMDIR/tmpfile
   /bin/rm -f $HOMDIR/$FILE

   if (      -e $BINDIR/$FILE ) then
      cat       $BINDIR/$FILE > $HOMDIR/tmpfile
   else if ( -e $ETCDIR/$FILE ) then
      cat       $ETCDIR/$FILE > $HOMDIR/tmpfile
   else
      echo "ERROR! Cannot find $FILE in $BINDIR or $ETCDIR!"
      exit 2
   endif


   sed -f $HOMDIR/sedfile $HOMDIR/tmpfile > $HOMDIR/$FILE

   echo "Creating ${C1}${FILE}${CN} for Experiment: $EXPID "
   chmod 755 $HOMDIR/$FILE

end

/bin/rm -f $HOMDIR/SETENV.commands

if ($GPU == "TRUE") then
/bin/rm -f $HOMDIR/GPUSTART.commands
/bin/rm -f $HOMDIR/GPUEND.commands
endif

if(     -e $BINDIR/HISTORY.rc.hold ) then
/bin/mv -f $BINDIR/HISTORY.rc.hold $BINDIR/HISTORY.rc.tmpl
else
/bin/rm -f $BINDIR/HISTORY.rc.tmpl
endif

echo $HOMDIR > $EXPDIR/.HOMDIR
echo " "

#######################################################################
#                 Produce Final script and .rc files
#######################################################################

# Comment or UN-Comment RESTARTS based on EXP Configuration
# ---------------------------------------------------------
set LH2O       = FALSE
set LMAM       = FALSE
set LCARMA     = FALSE
set LGMICHEM   = $ctmGMI
set LGEOSCHEMCHEM   = $ctmGEOS_Chem
set LSTRATCHEM = FALSE
set LGOCART    = $ctmGOCART

set RSNAMES = "LH2O LMAM LCARMA LGMICHEM LGEOSCHEMCHEM LSTRATCHEM LGOCART"
set RSTYPES = "INTERNAL IMPORT"

/bin/rm -f command
set FILE = GEOSCTM.rc.tmpl

if( -e $HOMDIR/$FILE ) set LOCDIR = $HOMDIR
if( -e $EXPDIR/$FILE ) set LOCDIR = $EXPDIR

foreach rsname ($RSNAMES)
   set  name = `echo $rsname | cut -b2-`
   set  test = `eval echo \$$rsname`
   if( $test == FALSE ) then
       foreach type ($RSTYPES)
          set  string = ${name}_${type}
          /bin/rm -f $LOCDIR/$FILE.tmp
          /bin/mv -f $LOCDIR/$FILE $LOCDIR/$FILE.tmp
          echo cat   $LOCDIR/$FILE.tmp \| awk \'\{if \( \$1 \~ \"${string}\" \) \
               \{sub \( \/${string}\/ ,\"\#${string}\"  \)\;print\} else print\}\' \> $LOCDIR/$FILE > command
          chmod +x   command
          ./command
          /bin/rm -f command
       end
   endif
end
if( $LGOCART == TRUE ) then
          /bin/rm -f $LOCDIR/$FILE.tmp
          /bin/mv -f $LOCDIR/$FILE $LOCDIR/$FILE.tmp
          set  string = AEROCLIM
          echo cat $LOCDIR/$FILE.tmp \| awk \'\{if \( \$1 \~ \"${string}\" \) \
               \{sub \( \/${string}\/ ,\"\#${string}\"  \)\;print\} else print\}\' \> $LOCDIR/$FILE > command
          chmod +x   command
          ./command
          /bin/rm -f command
endif
/bin/rm -f $LOCDIR/$FILE.tmp


# Delete or Enable EXP Configuration Variables
# --------------------------------------------
    set FILES = "GEOSCTM.rc.tmpl ctm_run.j HISTORY.rc.tmpl ctm_convert.j ctm_regress.j ctm_post.j ctm_plot.tmpl"
foreach FILE ($FILES)

if( -e $HOMDIR/$FILE ) set LOCDIR = $HOMDIR
if( -e $EXPDIR/$FILE ) set LOCDIR = $EXPDIR

/bin/rm -f $LOCDIR/$FILE.tmp
/bin/mv -f $LOCDIR/$FILE $LOCDIR/$FILE.tmp
    cat    $LOCDIR/$FILE.tmp | awk '{ if ( $1  !~ "#DELETE") { print } }' > $LOCDIR/$FILE
/bin/rm -f $LOCDIR/$FILE.tmp

end

chmod   +x $HOMDIR/ctm_run.j
chmod   +x $HOMDIR/ctm_convert.j
chmod   +x $HOMDIR/ctm_regress.j
chmod   +x $HOMDIR/ctm_post.j

#######################################################################
#         Finalizing Experiment Directories and Chem Registry
#######################################################################

# Check for Experiment Sub-Directories
# ------------------------------------
if(! -e $EXPDIR/post      ) mkdir -p $EXPDIR/post
if(! -e $EXPDIR/plot      ) mkdir -p $EXPDIR/plot
if(! -e $EXPDIR/archive   ) mkdir -p $EXPDIR/archive
if(! -e $EXPDIR/regress   ) mkdir -p $EXPDIR/regress
if(! -e $EXPDIR/convert   ) mkdir -p $EXPDIR/convert

# Rename and Move Files to Relevant Experiment Work Sub-Directories
# -----------------------------------------------------------------
/bin/mv $HOMDIR/ctm_post.j          $EXPDIR/post
/bin/mv $HOMDIR/ctm_plot.tmpl       $EXPDIR/plot
/bin/mv $HOMDIR/ctm_quickplot.csh   $EXPDIR/plot
/bin/mv $HOMDIR/ctm_moveplot.j      $EXPDIR/plot
/bin/mv $HOMDIR/ctm_archive.j       $EXPDIR/archive
/bin/mv $HOMDIR/ctm_regress.j       $EXPDIR/regress
/bin/mv $HOMDIR/ctm_convert.j       $EXPDIR/convert
/bin/cp $GEOSUTIL/post/plot.rc      $EXPDIR/plot
/bin/cp $GEOSUTIL/post/post.rc      $EXPDIR/post

/bin/mv $HOMDIR/CAP.rc.tmpl         $HOMDIR/CAP.rc
/bin/mv $HOMDIR/GEOSCTM.rc.tmpl     $HOMDIR/GEOSCTM.rc
/bin/mv $HOMDIR/HISTORY.rc.tmpl     $HOMDIR/HISTORY.rc

if( $HOMDIR != $EXPDIR ) then
/bin/mv $HOMDIR/FP_ExtData.rc.tmpl         $EXPDIR/FP_ExtData.rc.tmpl
/bin/mv $HOMDIR/FPIT_ExtData.rc.tmpl       $EXPDIR/FPIT_ExtData.rc.tmpl
/bin/mv $HOMDIR/MERRA1_ExtData.rc.tmpl     $EXPDIR/MERRA1_ExtData.rc.tmpl
/bin/mv $HOMDIR/MERRA2_ExtData.rc.tmpl     $EXPDIR/MERRA2_ExtData.rc.tmpl
endif

/bin/mv $HOMDIR/CTM_GridComp.rc.tmpl       $HOMDIR/CTM_GridComp.rc

/bin/mv $HOMDIR/pTracers_GridComp.rc.tmpl  $HOMDIR/pTracers_GridComp.rc

#######################################################################
#       Modify RC Directory for LM and PCHEM/GOCART/GOCART.data Options     
#######################################################################

# Modify RC Files for LM
# ----------------------
if( $GEOSCTM_LM != 72 ) then
    set files = `ls -1 $EXPDIR/RC/*.rc`
    foreach file ($files)
       /bin/rm -f    $EXPDIR/RC/dummy
       /bin/mv $file $EXPDIR/RC/dummy
       cat $EXPDIR/RC/dummy | sed -e "s|/L72/|/L${GEOSCTM_LM}/|g" \
                            | sed -e "s|z72|z${GEOSCTM_LM}|g"     \
                            | sed -e "s|_72_|_${GEOSCTM_LM}_|g"   > $file
     end
endif


# Turn on PCHEM
# -------------
if( $RATS_PROVIDER == PCHEM | $AERO_PROVIDER == PCHEM ) then
    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_PCHEM:") { sub(/FALSE/,"TRUE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc
endif


# Turn on Passive Tracer
# ---------------------
if( $ctmTRACER == TRUE ) then
    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_TR:") { sub(/FALSE/,"TRUE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_GOCART:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_GOCART_DATA:") { sub(/FALSE/,"TRUE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_STRATCHEM:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_MATRIX:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_OC" ) { sub(/yes/, "no" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_BC" ) { sub(/yes/, "no" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_CFC" ) { sub(/yes/, "no" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_DU" ) { sub(/yes/, "no" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_SU" ) { sub(/yes/, "no" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_SS" ) { sub(/yes/, "no" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_CO2" ) { sub(/yes/, "no" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_CO" ) { sub(/yes/, "no" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_NI" ) { sub(/yes/, "no" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_PC" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_TR" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

# Turn on GOCART
# --------------
else if( $ctmGOCART == TRUE ) then
    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_GOCART:") { sub(/FALSE/,"TRUE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_GOCART_DATA:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_TR:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_TR" ) { sub(/yes/, "no" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/CTM_GridComp.rc $EXPDIR/CTM_GridComp.tmp
    cat $EXPDIR/CTM_GridComp.tmp | \
    awk '{ if ($1~"do_ctmDiffusion") { sub(/F/,"T") }; print }' > $EXPDIR/CTM_GridComp.rc

    /bin/mv $EXPDIR/CTM_GridComp.rc $EXPDIR/CTM_GridComp.tmp
    cat $EXPDIR/CTM_GridComp.tmp | \
    awk '{ if ($1~"do_ctmConvection") { sub(/F/,"T") }; print }' > $EXPDIR/CTM_GridComp.rc

# Turn on GMI
# -----------
else if ( $ctmGMI == TRUE ) then
    /bin/mv $EXPDIR/CTM_GridComp.rc $EXPDIR/CTM_GridComp.tmp
    cat $EXPDIR/CTM_GridComp.tmp | \
    awk '{ if ($1~"do_ctmConvection") { sub(/F/,"T") }; print }' > $EXPDIR/CTM_GridComp.rc

    /bin/mv $EXPDIR/CTM_GridComp.rc $EXPDIR/CTM_GridComp.tmp
    cat $EXPDIR/CTM_GridComp.tmp | \
    awk '{ if ($1~"do_ctmDiffusion") { sub(/F/,"T") }; print }' > $EXPDIR/CTM_GridComp.rc

    /bin/mv $EXPDIR/CTM_GridComp.rc $EXPDIR/CTM_GridComp.tmp
    cat $EXPDIR/CTM_GridComp.tmp | \
    awk '{ if ($1~"convecType") { sub(/1/,"2") }; print }' > $EXPDIR/CTM_GridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_GOCART:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_PCHEM:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_TR:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_GMICHEM:") { sub(/FALSE/,"TRUE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_STRATCHEM:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_MATRIX:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    if($AERO_PROVIDER == GOCART.data) then
     /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
     cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
     awk '{ if ($1~"ENABLE_GOCART_DATA:") { sub(/FALSE/,"TRUE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc
    endif

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing" ) { sub(/yes/, "no" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_GMI" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_XX" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc
# Turn on GEOS-Chem
# -----------
else if ( $ctmGEOS_Chem == TRUE ) then
    /bin/mv $EXPDIR/CTM_GridComp.rc $EXPDIR/CTM_GridComp.tmp
    cat $EXPDIR/CTM_GridComp.tmp | \
    awk '{ if ($1~"do_ctmConvection") { sub(/F/,"T") }; print }' > $EXPDIR/CTM_GridComp.rc

    /bin/mv $EXPDIR/CTM_GridComp.rc $EXPDIR/CTM_GridComp.tmp
    cat $EXPDIR/CTM_GridComp.tmp | \
    awk '{ if ($1~"do_ctmDiffusion") { sub(/F/,"T") }; print }' > $EXPDIR/CTM_GridComp.rc

    /bin/mv $EXPDIR/CTM_GridComp.rc $EXPDIR/CTM_GridComp.tmp
    cat $EXPDIR/CTM_GridComp.tmp | \
    awk '{ if ($1~"convecType") { sub(/2/,"1") }; print }' > $EXPDIR/CTM_GridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_GOCART:") { sub(/FALSE/,"TRUE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_PCHEM:") { sub(/FALSE/,"TRUE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_TR:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_GMICHEM:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_GEOSCHEM:") { sub(/FALSE/,"TRUE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_STRATCHEM:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
    cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
    awk '{ if ($1~"ENABLE_MATRIX:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc

    if($AERO_PROVIDER == GOCART.data) then
     /bin/mv $EXPDIR/RC/GEOS_ChemGridComp.rc $EXPDIR/RC/GEOS_ChemGridComp.tmp
     cat $EXPDIR/RC/GEOS_ChemGridComp.tmp | \
     awk '{ if ($1~"ENABLE_GOCART_DATA:") { sub(/TRUE/,"FALSE") }; print }' > $EXPDIR/RC/GEOS_ChemGridComp.rc
    endif

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing" ) { sub(/yes/, "no" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_CO" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_CO2" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_DU" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_SS" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_SU" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_BC" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_OC" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_NI" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{ if ( $1 ~ "doing_PC" ) { sub(/no/, "yes" ) }; print }' > $EXPDIR/RC/Chem_Registry.rc

# Turn on Idealized Passive Tracers
# ---------------------------------
else if ( $ctmIPT == TRUE ) then
    /bin/mv $EXPDIR/CTM_GridComp.rc $EXPDIR/CTM_GridComp.tmp
    cat $EXPDIR/CTM_GridComp.tmp | \
    awk '{ if ($1~"ENABLE_pTracers") { sub(/F/,"T") }; print }' > $EXPDIR/CTM_GridComp.rc

    /bin/mv $EXPDIR/CTM_GridComp.rc $EXPDIR/CTM_GridComp.tmp
    cat $EXPDIR/CTM_GridComp.tmp | \
    awk '{ if ($1~"do_ctmConvection") { sub(/T/,"F") }; print }' > $EXPDIR/CTM_GridComp.rc

    /bin/mv $EXPDIR/CTM_GridComp.rc $EXPDIR/CTM_GridComp.tmp
    cat $EXPDIR/CTM_GridComp.tmp | \
    awk '{ if ($1~"do_ctmDiffusion") { sub(/T/,"F") }; print }' > $EXPDIR/CTM_GridComp.rc
endif
    /bin/rm -f $EXPDIR/CTM_GridComp.tmp

# Turn on RATS_PROVIDER
# ---------------------
if( $RATS_PROVIDER == PCHEM ) then
    /bin/mv $EXPDIR/RC/Chem_Registry.rc $EXPDIR/RC/Chem_Registry.tmp
    cat $EXPDIR/RC/Chem_Registry.tmp | \
    awk '{if ( $1 ~ "doing") { if ( $1 ~ "PC") sub(/no/, "yes" ); print;} else print }' > $EXPDIR/RC/Chem_Registry.rc
endif


#######################################################################
#                       Echo Settings and Messages
#######################################################################

echo "Done!"
echo "-----"
echo " "
echo "Build Directory: ${C2}${GEOSDIR}${CN}"
echo "----------------"
echo " "
if ( ! -e $GEOSDIR/$ARCH/bin/GEOSctm.x ) then
     echo " "
     echo "Note:  Build directory does not contain ${C1}GEOSctm.x${CN} !"
     echo "       You will need to put a copy of ${C1}GEOSctm.x${CN} in your Experiment directory"
     echo "----------------------------------------------------------------------------"
     echo " "
else
     echo " "
     echo "The following executable has been placed in your Experiment Directory:"
     echo "----------------------------------------------------------------------"
     echo "${C2}$GEOSDIR/$ARCH/bin/GEOSctm.x${CN}"
     echo " "
endif
echo " "
  echo "------------------------------------------------- "
  echo "N O T I C E :  After you copy your "
  echo " "
  echo " ${C1}cap_restart${CN} (required)"
  echo " "
  echo "and your initial conditions"
  echo " "
  if( $ctmGOCART == TRUE) echo " ${C1}gocart_internal_rst${CN} (optional)"
  if( $ctmGMI == TRUE) then
   echo " ${C1}gmichem_internal_rst${CN} (required)"
   echo " ${C1}gmichem_import_rst${CN}   (optional)"
  endif
  if( $ctmGEOS_Chem == TRUE) then
   echo " ${C1}geoschemchem_internal_rst${CN} (required)"
   echo " ${C1}geoschemchem_import_rst${CN}   (optional)"
  endif
  if( $ctmTRACER == TRUE) echo " ${C1}tr_internal_rst${CN} (optional)"
  if( $ctmIPT == TRUE) echo " ${C1}pTracers_internal_rst${CN} (optional)"
  echo " "
  echo "files into your experiment directory "
  echo " "
  echo " ${C2}${EXPDIR}${CN}"
  echo ""
  echo "you will be ready to run the GEOS-5 CTM!"
  echo "------------------------------------------------- "
echo " "

#######################################################################
#                              Clean-Up
#######################################################################

if( -e $HOMDIR/tmpfile ) /bin/rm $HOMDIR/tmpfile
if( -e $HOMDIR/sedfile ) /bin/rm $HOMDIR/sedfile

#######################################################################
#                  Determine Experiment Specific src Files
#######################################################################

if ( $NOCVS != "TRUE" ) then

echo "ERROR! Repository managment is not supported yet in this model"
echo "       due to the move to git. If this section is reached,"
echo "       something has gone wrong. Please contact Matt Thompson"
echo "       or Larry Takacs"
exit 3

# Make a src directory under EXPDIR to hold current Experiment files
# Note:  Sandbox Source Location: $GEOSDIR/src
#        EXP TAG Source Location: $EXPDIR/src/GEOSctm/src
# ------------------------------------------------------------------
/bin/rm -rf ${EXPDIR}/src
mkdir   -p  ${EXPDIR}/src/GEOSctm/src
cd          ${EXPDIR}/src/GEOSctm/src

echo "${C2}Copying${CN} ${C1}Sandbox Source Code${CN} ${C2}(including non-committed files) into"
echo "  ${CN} ${C1}${EXPDIR}/src/GEOSctm/src${CN} ${C2}...${CN}"
# ----------------------------------------------------------------------------------------------------------------------------------
rsync -ar  --exclude '*.o'    \
           --exclude '*.x'    \
           --exclude '*.xx'   \
           --exclude '*.a'    \
           --exclude '*.d'    \
           --exclude '*.nc4'  \
           --exclude '*.mod'  \
           --exclude 'GEOSctm.x.*' \
             ${GEOSDIR}/src/* .
echo " "

# -----------------------------------------------------------------------------
# Create CVS TAG for Experiment
# -----------------------------------------------------------------------------

# Change Dots to Underscores in EXPID for CVS Tag
# -----------------------------------------------
set EXPIDTAG = `echo ${EXPID} | sed -e 's/\./_/g'`
set tagname  = "${EXPIDTAG}__${LOGNAME}"

if( ! $?ESMA_NOCOMMIT ) then
TAGNAME:
    echo "Enter ${C1}CVS Tag${CN} to COMMIT this Experiment (Default: ${C2}${tagname}${CN})"
    echo "Enter ${C1}q${CN} or ${C1}quit${CN} to QUIT or SKIP the CVS COMMIT:"
    set    TAGTMP  =  $<
    if ( .$TAGTMP != . ) then
       set tagname = "$TAGTMP"
    endif
    # Change Dots to Underscores in TAGNAME for CVS Tag
    # -------------------------------------------------
    set  tagname = `echo ${tagname} | sed -e 's/\./_/g'`
    if( $tagname == 'q' | $tagname == 'quit' ) then
        setenv ESMA_NOCOMMIT TRUE
        set tagname = "${EXPIDTAG}__${LOGNAME}"
        set  NUM_COMMIT_STATUS =    `/bin/ls -1 ${EXPDIR}/src | grep COMMIT_STATUS`
        if($#NUM_COMMIT_STATUS > 0 ) /bin/rm -f ${EXPDIR}/src/COMMIT_STATUS_*
        touch                                   ${EXPDIR}/src/COMMIT_STATUS_FALSE
    else
        set tagtest = `cvs status -v g5_modules | grep ${tagname}`
        if( $#tagtest != 0 ) then
            echo "      ${C1}CVS COMMIT Tag${CN} ${C2}${tagname}${CN} already exists."
            set tagname = "${EXPIDTAG}__${LOGNAME}"
            goto TAGNAME
        endif
    endif
else
     set  NUM_COMMIT_STATUS =    `/bin/ls -1 ${EXPDIR}/src | grep COMMIT_STATUS`
     if($#NUM_COMMIT_STATUS > 0 ) /bin/rm -f ${EXPDIR}/src/COMMIT_STATUS_*
     touch                                   ${EXPDIR}/src/COMMIT_STATUS_FALSE
endif

/bin/rm -f       ${EXPDIR}/src/GEOSctm/src/Applications/GEOSctm_App/.GEOSCTM_VERSION
echo $tagname  > ${EXPDIR}/src/GEOSctm/src/Applications/GEOSctm_App/.GEOSCTM_VERSION


# Create a list of non-committed Sandbox files (ignore updated files not included in sandbox)
# -------------------------------------------------------------------------------------------
cvs -nq upd | grep -v "U " > ${EXPDIR}/src/srcfiles


echo "${C2}Non-Committed Sandbox Files:${CN}"
echo "---------------------------------"

/bin/rm -f ${EXPDIR}/src/cvs.log

while( -e  ${EXPDIR}/src/srcfiles )
  set file = `head -1 ${EXPDIR}/src/srcfiles`
  set   bit = `echo "$file" | cut -c1`
  if( "$bit" != "?" ) then
         set  file = `echo "$file" | cut -d' ' -f2`
        echo $file

      # Local Copy of Differing Sandbox File from TAG file
      # --------------------------------------------------
        set newfile = `echo $file | sed -e "s?/?^?g"`
        /bin/cp -f  ${EXPDIR}/src/GEOSctm/src/$file ${EXPDIR}/src/$newfile

      # CVS Commit updated Sandbox files
      # --------------------------------
        if( ! $?ESMA_NOCOMMIT ) then
                          set  branchname = "BRANCH__${tagname}"
              cvs tag    -b  ${branchname}         $file >&  ${EXPDIR}/src/cvs.log
              cvs upd    -r  ${branchname}         $file >&  ${EXPDIR}/src/cvs.log
              cvs commit -m "${tagname} ${EXPDSC}" $file >&  ${EXPDIR}/src/cvs.log
        endif

  endif
  sed 1,1d -i ${EXPDIR}/src/srcfiles
  set  nfiles = `wc -c ${EXPDIR}/src/srcfiles | cut -d" " -f 1`
  if( $nfiles == 0 ) /bin/rm -f ${EXPDIR}/src/srcfiles
end

echo " "
      # Tag Final EXPDIR/src/GEOSctm/src
      # ---------------------------------
        if( ! $?ESMA_NOCOMMIT ) then
              cvs tag ${tagname}  >&  ${EXPDIR}/src/cvs.log
              if( $status == 0 ) then
                  echo "${C2}EXP:${CN} ${C1}$EXPID${CN} ${C2}successfully committed with TAG:${CN} ${C1}${tagname}${CN}"
                  echo "-------------------------------------------------------"
                  set  NUM_COMMIT_STATUS =    `/bin/ls -1 ${EXPDIR}/src | grep COMMIT_STATUS`
                  if($#NUM_COMMIT_STATUS > 0 ) /bin/rm -f ${EXPDIR}/src/COMMIT_STATUS_*
                  touch                                   ${EXPDIR}/src/COMMIT_STATUS_TRUE
              else
                  echo "${C2}EXP:${CN} ${C1}$EXPID${CN} ${C2}failed to be committed with TAG:${CN} ${C1}${tagname}${CN}"
                  echo "-------------------------------------------------------"
                  set  NUM_COMMIT_STATUS =    `/bin/ls -1 ${EXPDIR}/src | grep COMMIT_STATUS`
                  if($#NUM_COMMIT_STATUS > 0 ) /bin/rm -f ${EXPDIR}/src/COMMIT_STATUS_*
                  if($#NUM_COMMIT_STATUS > 0 ) /bin/rm -f ${EXPDIR}/src/COMMIT_STATUS_*
                  touch                                   ${EXPDIR}/src/COMMIT_STATUS_FALSE
              endif
        endif

if( -e ${EXPDIR}/src/cvs.log ) /bin/rm -f ${EXPDIR}/src/cvs.log
cd     ${EXPDIR}/src

echo ""
echo "${C2}Tarring${CN} Experiment Source Code into Single File ${C2}...${CN}"
# ---------------------------------------------------------------------------
/bin/tar cf ${EXPID}.GEOSctm.tar GEOSctm
/bin/rm -r                       GEOSctm
echo ""

endif

#######################################################################

exit

#######################################################################
#                         Clone old Experiment
#######################################################################

DOCLONE:

#######################################################################
#                    Enter Clone ID and Description
#######################################################################

OLDEXP:
echo
echo "Enter the ${C1}location${CN} of the experiment to clone (where ctm_run.j is located):"
set CLONEDIR = $<

if ( $CLONEDIR == "") then
   goto OLDEXP
else if ( ! -d $CLONEDIR ) then
   echo
   echo "Could not find ${CLONEDIR}"
   goto OLDEXP
endif

# ------------------------------------------------------
# To setup the clone, we need to look in a couple files, 
# so make sure they are readable
# ------------------------------------------------------

if ( ! -r $CLONEDIR/ctm_run.j ) then
   echo
   echo "$CLONEDIR/ctm_run.j is not readable. Please check permissions."
   exit 1
endif

if ( ! -r $CLONEDIR/HISTORY.rc ) then
   echo
   echo "$CLONEDIR/HISTORY.rc is not readable. Please check permissions."
   exit 1
endif

# -----------------------------------------
# Grab the old EXPID, and other information
# -----------------------------------------

set  OLDEXPID=`awk '/^EXPID/ {print $2}' $CLONEDIR/HISTORY.rc`
set OLDHOMDIR=`awk '/^setenv +HOMDIR/ {print $3}' $CLONEDIR/ctm_run.j`
set OLDEXPDIR=`awk '/^setenv +EXPDIR/ {print $3}' $CLONEDIR/ctm_run.j`
set   OLDUSER=`/bin/ls -l $CLONEDIR/ctm_run.j | awk '{print $3}'`

setenv ARCH      `uname`
setenv GEOSDIR  /`grep "setenv GEOSDIR" $CLONEDIR/ctm_run.j | cut -d'/' -f2-`
setenv GEOSSRC  ${GEOSDIR}
setenv GEOSBIN  ${GEOSDIR}/bin
setenv GEOSETC  ${GEOSDIR}/etc
setenv GEOSUTIL ${GEOSDIR}
setenv CTMVER   `cat ${GEOSETC}/.GEOSCTM_VERSION`

# -------------------------------------------------
# Figure out how this person usually runs the model
# -------------------------------------------------

if ( ! -e $HOME/.HOMDIRroot || ! -e $HOME/.EXPDIRroot ) then
   if ( -e $HOME/.HOMDIRroot && ! -e $HOME/.EXPDIRroot ) then
      echo "$HOME/.EXPDIRroot was not found."
      echo "Please run ctm_setup in non-clone mode at least once to use this script."
      exit 1
   else if ( ! -e $HOME/.HOMDIRroot && -e $HOME/.EXPDIRroot ) then
      echo "$HOME/.HOMDIRroot was not found."
      echo "Please run ctm_setup in non-clone mode at least once to use this script."
      exit 1
   else
      echo "$HOME/.HOMDIRroot and $HOME/.EXPDIRroot were not found."
      echo "Please run ctm_setup in non-clone mode at least once to use this script."
      exit 1
   endif
else
   # MAT There are two thoughts here. You can either place the clone
   # in the .HOMDIRroot/.EXPDIRroot, but that is only nice if you have
   # one place, you put all your experiments. What if you have lots of
   # directories? Instead, let us default to the directory root of the
   # cloned experiment.

   #set HOMDIRroot=`cat $HOME/.HOMDIRroot`
   set HOMDIRroot=`dirname $OLDHOMDIR`
   #echo "Setting HOMDIR to $HOMDIRroot"
   #set EXPDIRroot=`cat $HOME/.EXPDIRroot`
   set EXPDIRroot=`dirname $OLDEXPDIR`
   #echo "Setting EXPDIR to $EXPDIRroot"
endif

if ( -e $HOME/.GROUProot ) then
   set GROUProot=`cat $HOME/.GROUProot`
   #echo "Using account $GROUProot"
else
   echo "$HOME/.GROUProot not found."
   set GROUProot=`groups | awk '{print $1}'`
   echo "Based off of groups, setting account to $GROUProot"
endif

# -----------------------------------
# Find out if we are running the cube 
# -----------------------------------

if ( -e $CLONEDIR/fvcore_layout.rc ) then
   set CUBED = TRUE
else
   set CUBED = FALSE
endif

# ------------------------------------------------
# Set the new EXPDIR and HOMDIR based on the roots
# ------------------------------------------------
set  NEWEXPID=$EXPID
set NEWEXPDIR=$EXPDIRroot/$NEWEXPID
set NEWHOMDIR=$HOMDIRroot/$NEWEXPID

# -----------------------------------------
# If the new EXPDIR and HOMDIR exist, exit!
# -----------------------------------------

if ( -d $NEWEXPDIR ) then
   echo "$NEWEXPDIR already exists! Exiting!"
   exit 2
endif

if ( -d $NEWHOMDIR ) then
   echo "$NEWHOMDIR already exists! Exiting!"
   exit 3
endif

# -----------------------------------
# Make all our needed temporary files
# -----------------------------------

onintr TRAP

set FILES_TO_PROCESS=`mktemp`
set OLDEXPFILES=`mktemp`
set NEWEXPFILES=`mktemp`
set COPYSCRIPT=`mktemp`
set SEDFILE=`mktemp`


# --------------------------
# Setup the files to process
# --------------------------

cat > $FILES_TO_PROCESS << EOF
EXPDIR/post/ctm_post.j
EXPDIR/plot/ctm_plot.tmpl
EXPDIR/plot/ctm_quickplot.csh
EXPDIR/plot/ctm_moveplot.j
EXPDIR/archive/ctm_archive.j
EXPDIR/regress/ctm_regress.j
EXPDIR/convert/ctm_convert.j
EXPDIR/plot/plot.rc
EXPDIR/post/post.rc
HOMDIR/CAP.rc
HOMDIR/GEOSCTM.rc
HOMDIR/HISTORY.rc
HOMDIR/ctm_run.j
HOMDIR/MAPL_ExtData.rc
HOMDIR/CTM_GridComp.rc
HOMDIR/pTracers_GridComp.rc
HOMDIR/MERRA2_ExtData.rc.tmpl
HOMDIR/MERRA1_ExtData.rc.tmpl
HOMDIR/FPIT_ExtData.rc.tmpl
HOMDIR/FP_ExtData.rc.tmpl
EOF

if($CUBED == "TRUE") then
cat >> $FILES_TO_PROCESS << EOF
HOMDIR/fvcore_layout.rc
EOF
endif

# ------------------------------------------------
# Create two sets of files so we can copy from one
# directory to another. 
# ------------------------------------------------

# Then alter them
# ---------------

sed -e "/^EXPDIR/ s#EXPDIR#$OLDEXPDIR#" \
    -e "/^HOMDIR/ s#HOMDIR#$OLDHOMDIR#"   $FILES_TO_PROCESS > $OLDEXPFILES

sed -e "/^EXPDIR/ s#EXPDIR#$NEWEXPDIR#" \
    -e "/^HOMDIR/ s#HOMDIR#$NEWHOMDIR#"   $FILES_TO_PROCESS > $NEWEXPFILES

# -----------------------------------------
# Now, use paste to join these two files...
# ...add a cp in front of the lines.
# -----------------------------------------

paste $OLDEXPFILES $NEWEXPFILES | sed -e "s/.*/cp -a &/" > $COPYSCRIPT

# ------------------------
# Make the new directories
# ------------------------

foreach file (`cat $NEWEXPFILES`)
   set dir=`dirname $file`
   /bin/mkdir -p $dir
end

# -------------------
# Run the copy script
# -------------------

sh $COPYSCRIPT

# ----------------------------------------------------
# Create or copy over files that don't need processing
# ----------------------------------------------------

echo "$NEWHOMDIR" >> $NEWEXPDIR/.HOMDIR
/bin/cp $OLDEXPDIR/GEOSctm.x $NEWEXPDIR
/bin/cp -a $OLDEXPDIR/RC $NEWEXPDIR/RC

# -----------------------------------------------------
# Now actually change the various environment variables
# -----------------------------------------------------

cat > $SEDFILE << EOF
/^setenv \+EXPDIR/ s#$OLDEXPDIR#$NEWEXPDIR#
/^setenv \+HOMDIR/ s#$OLDHOMDIR#$NEWHOMDIR#
/^setenv \+CNVDIR/ s#$OLDHOMDIR#$NEWHOMDIR#
/^setenv \+EXPID/  s#$OLDEXPID#$NEWEXPID#
/^EXPID:/  s#$OLDEXPID#$NEWEXPID#
/GEOSUTIL\/post\/ctmpost.script/ s#$OLDEXPDIR#$NEWEXPDIR#
/group_list/ s#\(group_list=\)\(.*\)#\1$GROUProot#
/^#SBATCH -A/ s#\(SBATCH -A \)\(.*\)#\1$GROUProot#
/^#SBATCH --account=/ s#\(SBATCH --account=\)\(.*\)#\1$GROUProot#
EOF

foreach file (`cat $NEWEXPFILES`)
   sed -i -f $SEDFILE $file
end

# ------------------------------------------
# Change the EXPDSC in HISTORY.rc to reflect
# the fact this experiment was cloned
# ------------------------------------------

#sed -i -e "/^EXPDSC:/ s#\(EXPDSC: \)\(.*\)#\1${NEWEXPID}_clonedfrom_${OLDEXPID}_by_${OLDUSER}#" $NEWHOMDIR/HISTORY.rc
 sed -i -e "/^EXPDSC:/ s#\(EXPDSC: \)\(.*\)#\1${EXPDSC}#" $NEWHOMDIR/HISTORY.rc

# -------------------------
# Construct the new job ids
# -------------------------

    set RUN_N=`echo $NEWEXPID | cut -b1-11`_RUN
   set RUN_FN=`echo $NEWEXPID | cut -b1-11`_FCST
   set POST_N=`echo $NEWEXPID | cut -b1-10`_POST
   set PLOT_N=`echo $NEWEXPID | cut -b1-11`_PLT
   set MOVE_N=`echo $NEWEXPID | cut -b1-11`_MOVE
set ARCHIVE_N=`echo $NEWEXPID | cut -b1-10`_ARCH
set REGRESS_N=`echo $NEWEXPID | cut -b1-10`_RGRS
set CONVERT_N=`echo $NEWEXPID | cut -b1-11`_CNV

sed -i -e "/^#PBS -N/ s#\(PBS -N \)\(.*\)#\1$RUN_N#"     \
       -e "/^#SBATCH --job-name=/ s#\(SBATCH --job-name=\)\(.*\)#\1$RUN_N#"     $NEWHOMDIR/ctm_run.j
sed -i -e "/^#PBS -N/ s#\(PBS -N \)\(.*\)#\1$POST_N#"    \
       -e "/^#SBATCH --job-name=/ s#\(SBATCH --job-name=\)\(.*\)#\1$POST_N#" \
       -e "/^setenv BATCHNAME/ s#\(setenv BATCHNAME *\)\(.*\)#\1 $POST_N#"      $NEWEXPDIR/post/ctm_post.j
sed -i -e "/^#PBS -N/ s#\(PBS -N \)\(.*\)#\1$PLOT_N#"    \
       -e "/^#SBATCH --job-name=/ s#\(SBATCH --job-name=\)\(.*\)#\1$PLOT_N#"    $NEWEXPDIR/plot/ctm_plot.tmpl

if ( -e $NEWEXPDIR/plot/ctm_moveplot.j ) then
   sed -i -e "/^#PBS -N/ s#\(PBS -N \)\(.*\)#\1$MOVE_N#"    \
          -e "/^#SBATCH --job-name=/ s#\(SBATCH --job-name=\)\(.*\)#\1$MOVE_N#" $NEWEXPDIR/plot/ctm_moveplot.j
endif

sed -i -e "/^#PBS -N/ s#\(PBS -N \)\(.*\)#\1$ARCHIVE_N#" \
       -e "/^#SBATCH --job-name=/ s#\(SBATCH --job-name=\)\(.*\)#\1$ARCHIVE_N#" $NEWEXPDIR/archive/ctm_archive.j
sed -i -e "/^#PBS -N/ s#\(PBS -N \)\(.*\)#\1$REGRESS_N#" \
       -e "/^#SBATCH --job-name=/ s#\(SBATCH --job-name=\)\(.*\)#\1$REGRESS_N#" $NEWEXPDIR/regress/ctm_regress.j
sed -i -e "/^#PBS -N/ s#\(PBS -N \)\(.*\)#\1$CONVERT_N#" \
       -e "/^#SBATCH --job-name=/ s#\(SBATCH --job-name=\)\(.*\)#\1$CONVERT_N#" $NEWEXPDIR/convert/ctm_convert.j

# --------------------------
# Echo Settings and Messages
# --------------------------

echo "Done with cloning!"
echo "------------------"
echo " "
echo "Original Experiment Directory: ${C2}${OLDEXPDIR}${CN}"
echo "------------------------------"
echo " "
echo "You must now copy your ${C1}Initial Conditions${CN} into: "
echo "----------------------------------------------- "
echo "${C2}${NEWEXPDIR}${CN}"
echo ""
echo ""

# -------------------------
# Clean up the mktemp files
# -------------------------

/bin/rm $FILES_TO_PROCESS
/bin/rm $OLDEXPFILES
/bin/rm $NEWEXPFILES
/bin/rm $COPYSCRIPT
/bin/rm $SEDFILE

# --------------------------------
# Cloned Experiment Source Control
# --------------------------------

if ( $NOCVS != "TRUE" ) then

echo "ERROR! Repository managment is not supported yet in this model"
echo "       due to the move to git. If this section is reached,"
echo "       something has gone wrong. Please contact Matt Thompson"
echo "       or Larry Takacs"
exit 3

# Make a src directory under NEWEXPDIR to hold current Experiment files
# Note:  Sandbox Source Location: $GEOSDIR/src
#        EXP TAG Source Location: $NEWEXPDIR/src/GEOSctm/src
# ------------------------------------------------------------------
/bin/rm -rf ${NEWEXPDIR}/src
mkdir   -p  ${NEWEXPDIR}/src/GEOSctm/src
cd          ${NEWEXPDIR}/src/GEOSctm/src

echo "${C2}Copying${CN} ${C1}Sandbox Source Code${CN} ${C2}(including non-committed files) into${CN} ${C1}${NEWEXPDIR}/src/GEOSctm/src${CN} ${C2}...${CN}"
# ---------------------------------------------------------------------------------------------------------------------------------
rsync -ar  --exclude '*.o'    \
           --exclude '*.x'    \
           --exclude '*.xx'   \
           --exclude '*.a'    \
           --exclude '*.d'    \
           --exclude '*.nc4'  \
           --exclude '*.mod'  \
           --exclude 'GEOSctm.x.*' \
             ${GEOSDIR}/src/* .
echo " "

# -----------------------------------------------------------------------------
# Create CVS TAG for Experiment
# -----------------------------------------------------------------------------

# Change Dots to Underscores in NEWEXPID for CVS Tag
# --------------------------------------------------
set EXPIDTAG = `echo ${NEWEXPID} | sed -e 's/\./_/g'`
set tagname  = "${EXPIDTAG}__${LOGNAME}"

if( ! $?ESMA_NOCOMMIT ) then
NEWTAGNAME:
    echo "Enter ${C1}CVS Tag${CN} to COMMIT this Experiment (Default: ${C2}${tagname}${CN})"
    echo "Enter ${C1}q${CN} or ${C1}quit${CN} to QUIT or SKIP the CVS COMMIT:"
    set    TAGTMP  =  $<
    if ( .$TAGTMP != . ) then
       set tagname = "$TAGTMP"
    endif
    # Change Dots to Underscores in TAGNAME for CVS Tag
    # -------------------------------------------------
    set  tagname = `echo ${tagname} | sed -e 's/\./_/g'`
    if( $tagname == 'q' | $tagname == 'quit' ) then
        setenv ESMA_NOCOMMIT TRUE
        set tagname = "${EXPIDTAG}__${LOGNAME}"
        set  NUM_COMMIT_STATUS =    `/bin/ls -1 ${NEWEXPDIR}/src | grep COMMIT_STATUS`
        if($#NUM_COMMIT_STATUS > 0 ) /bin/rm -f ${NEWEXPDIR}/src/COMMIT_STATUS_*
        touch                                   ${NEWEXPDIR}/src/COMMIT_STATUS_FALSE
    else
        set tagtest = `cvs status -v g5_modules | grep ${tagname}`
        if( $#tagtest != 0 ) then
            echo "      ${C1}CVS COMMIT Tag${CN} ${C2}${tagname}${CN} already exists."
            set tagname = "${EXPIDTAG}__${LOGNAME}"
            goto NEWTAGNAME
        endif
    endif
else
     set  NUM_COMMIT_STATUS =    `/bin/ls -1 ${NEWEXPDIR}/src | grep COMMIT_STATUS`
     if($#NUM_COMMIT_STATUS > 0 ) /bin/rm -f ${NEWEXPDIR}/src/COMMIT_STATUS_*
     touch                                   ${NEWEXPDIR}/src/COMMIT_STATUS_FALSE
endif

/bin/rm -f       ${NEWEXPDIR}/src/GEOSctm/src/Applications/GEOSctm_App/.GEOSCTM_VERSION
echo $tagname  > ${NEWEXPDIR}/src/GEOSctm/src/Applications/GEOSctm_App/.GEOSCTM_VERSION


# Create a list of non-committed Sandbox files
# --------------------------------------------
cvs -nq upd > ${NEWEXPDIR}/src/srcfiles


echo "${C2}Non-Committed Sandbox Files:${CN}"
echo "---------------------------------"

/bin/rm -f ${NEWEXPDIR}/src/cvs.log

while( -e  ${NEWEXPDIR}/src/srcfiles )
  set file = `head -1 ${NEWEXPDIR}/src/srcfiles`
  set   bit = `echo "$file" | cut -c1`
  if( "$bit" != "?" ) then
         set  file = `echo "$file" | cut -d' ' -f2`
        echo $file

      # Local Copy of Differing Sandbox File from TAG file
      # --------------------------------------------------
        set newfile = `echo $file | sed -e "s?/?^?g"`
        /bin/cp -f  ${NEWEXPDIR}/src/GEOSctm/src/$file ${NEWEXPDIR}/src/$newfile

      # CVS Commit updated Sandbox files
      # --------------------------------
        if( ! $?ESMA_NOCOMMIT ) then
                          set  branchname = "BRANCH__${tagname}"
              cvs tag    -b  ${branchname}         $file  >&  ${NEWEXPDIR}/src/cvs.log
              cvs upd    -r  ${branchname}         $file  >&  ${NEWEXPDIR}/src/cvs.log
              cvs commit -m "${tagname} ${EXPDSC}" $file  >&  ${NEWEXPDIR}/src/cvs.log
        endif

  endif
  sed 1,1d -i ${NEWEXPDIR}/src/srcfiles
  set  nfiles = `wc -c ${NEWEXPDIR}/src/srcfiles | cut -d" " -f 1`
  if( $nfiles == 0 ) /bin/rm -f ${NEWEXPDIR}/src/srcfiles
end

echo " "
      # Tag Final NEWEXPDIR/src/GEOSctm/src
      # -----------------------------------
        if( ! $?ESMA_NOCOMMIT ) then
              cvs tag ${tagname}  >&  ${NEWEXPDIR}/src/cvs.log
              if( $status == 0 ) then
                  echo "${C2}EXP:${CN} ${C1}$NEWEXPID${CN} ${C2}successfully committed with TAG:${CN} ${C1}${tagname}${CN}"
                  echo "-------------------------------------------------------"
                  set  NUM_COMMIT_STATUS =    `/bin/ls -1 ${NEWEXPDIR}/src | grep COMMIT_STATUS`
                  if($#NUM_COMMIT_STATUS > 0 ) /bin/rm -f ${NEWEXPDIR}/src/COMMIT_STATUS_*
                  touch                                   ${NEWEXPDIR}/src/COMMIT_STATUS_TRUE
              else
                  echo "${C2}EXP:${CN} ${C1}$NEWEXPID${CN} ${C2}failed to be committed with TAG:${CN} ${C1}${tagname}${CN}"
                  echo "-------------------------------------------------------"
                  set  NUM_COMMIT_STATUS =    `/bin/ls -1 ${NEWEXPDIR}/src | grep COMMIT_STATUS`
                  if($#NUM_COMMIT_STATUS > 0 ) /bin/rm -f ${NEWEXPDIR}/src/COMMIT_STATUS_*
                  touch                                   ${NEWEXPDIR}/src/COMMIT_STATUS_FALSE
              endif
        endif

/bin/rm -f ${NEWEXPDIR}/src/cvs.log
cd         ${NEWEXPDIR}/src

echo ""
echo "${C2}Tarring${CN} Experiment Source Code into Single File ${C2}...${CN}"
# ---------------------------------------------------------------------------
     tar cf ${NEWEXPID}.GEOSctm.tar GEOSctm
/bin/rm -r                          GEOSctm
echo ""

endif

exit

# ------------------------------------------
# Set a trap to remove the tempfiles on EXIT
# ------------------------------------------
TRAP:
   echo "Interrupt received, cleaning up temporary files"
   /bin/rm $FILES_TO_PROCESS $OLDEXPFILES $NEWEXPFILES $COPYSCRIPT $SEDFILE
   exit 1

#######################################################################
#                      Usage and Error Outputs
#######################################################################

ONCOMPUTE:
echo
echo "${BOLD}${RED}            ERROR: On Compute Node ${RESET}"
echo "${BOLD}${RED}            ====================== ${RESET}"

cat << EOF

ctm_setup requires access to internet resources, namely
the CVS repository. You are attempting to run ctm_setup
on compute node ${NODE} at ${SITE}. Please re-run on a head 
node, or supply the --nocvs option. 

For more information, contact Matt Thompson or
Larry Takacs at GMAO.

EOF

exit 1

CONTACTMATT:
cat <<EOF

It appears your environment is not set correctly to
run with the GPUs. If you wish to build and run the 
model using GPUs, please contact Matt Thompson at:
    
            matthew.thompson@nasa.gov

EOF
exit 1

SETCOLOR:
echo
echo "\033[1;4mCTM Setup Utility${RESET}"
echo
echo "Enter Desired Color Codes for ${BOLD}Highlighted${RESET} and ${BOLD}Default${RESET} text:"
echo
echo "${BOLD}Highlighted${RESET} Text Color: ${BLACK}0 BLACK${RESET}"
echo "                 Color: ${RED}1 RED${RESET}"
echo "                 Color: ${GREEN}2 GREEN${RESET}"
echo "                 Color: ${YELLOW}3 YELLOW${RESET}"
echo "                 Color: ${BLUE}4 BLUE${RESET}"
echo "                 Color: ${MAGENTA}5 MAGENTA${RESET}"
echo "                 Color: ${CYAN}6 CYAN${RESET}"
echo "                 Color: ${WHITE}7 WHITE${RESET}"
echo "                 Color: ${RESET}8 No Color"
set C1 = $<
  @ C1 = $C1 + 1
echo
echo "    ${BOLD}Default${RESET} Text Color: ${BLACK}0 BLACK${RESET}"
echo "                 Color: ${RED}1 RED${RESET}"
echo "                 Color: ${GREEN}2 GREEN${RESET}"
echo "                 Color: ${YELLOW}3 YELLOW${RESET}"
echo "                 Color: ${BLUE}4 BLUE${RESET}"
echo "                 Color: ${MAGENTA}5 MAGENTA${RESET}"
echo "                 Color: ${CYAN}6 CYAN${RESET}"
echo "                 Color: ${WHITE}7 WHITE${RESET}"
echo "                 Color: ${RESET}8 No Color"
set C2 = $<
  @ C2 = $C2 + 1
if( -e $HOME/.CTMSETUP ) /bin/rm -f $HOME/.CTMSETUP
touch $HOME/.CTMSETUP
echo $COLORS[$C1] >> $HOME/.CTMSETUP
echo $COLORS[$C2] >> $HOME/.CTMSETUP
exit 1

USAGE:
cat <<EOF
ctm_setup, a setup script for the GEOS-5 CTM

   Usage: $0:t [optional flag]

   -c --color      Set the colors for $0:t
   -g --gpu        Run the model using the GPUs
   -h --help       Show usage
      --nocvs      Do not archive the source

   If invoked alone, the script runs as normal.

   For more information, please contact Larry Takacs.

   Note: ctm_setup must be run on a machine with CVS access.

EOF
exit 1
